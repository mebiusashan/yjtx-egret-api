{
	"member": [
		{
			"kind": "member",
			"type": "number",
			"name": "hashCode",
			"memberof": "egret.HashObject",
			"scope": "instance",
			"rwType": 1,
			"description": "返回此对象唯一的哈希值,用于唯一确定一个对象。hashCode为大于等于1的整数。",
			"version": "Egret 2.4",
			"platform": "Web,Native",
			"inherited": true,
			"inherits": "egret.HashObject"
		}
	],
	"function": [
		{
			"kind": "function",
			"name": "EgretFactory",
			"memberof": "dragonBones.EgretFactory",
			"scope": "instance"
		},
		{
			"kind": "function",
			"type": "void",
			"name": "addDragonBonesData",
			"memberof": "dragonBones.BaseFactory",
			"scope": "instance",
			"description": "添加一个DragonBonesData实例",
			"params": [
				{
					"name": "data",
					"type": "dragonBones.DragonBonesData",
					"description": "一个DragonBonesData实例"
				},
				{
					"name": "name",
					"type": "string",
					"default": "null",
					"description": "(optional) DragonBonesData的名字"
				}
			],
			"inherited": true,
			"inherits": "dragonBones.BaseFactory"
		},
		{
			"kind": "function",
			"type": "void",
			"name": "addEventListener",
			"memberof": "egret.EventDispatcher",
			"scope": "instance",
			"inheritDoc": true,
			"version": "Egret 2.4",
			"platform": "Web,Native",
			"params": [
				{
					"name": "type",
					"type": "string",
					"description": "事件的类型。"
				},
				{
					"name": "listener",
					"type": "Function",
					"description": "处理事件的侦听器函数。此函数必须接受 Event 对象作为其唯一的参数，并且不能返回任何结果，如下面的示例所示： function(evt:Event):void 函数可以有任何名称。"
				},
				{
					"name": "thisObject",
					"type": "any",
					"description": "侦听函数绑定的this对象"
				},
				{
					"name": "useCapture",
					"question": true,
					"type": "boolean",
					"description": "确定侦听器是运行于捕获阶段还是运行于冒泡阶段。如果将 useCapture 设置为 true，则侦听器只在捕获阶段处理事件，而不在冒泡阶段处理事件。如果 useCapture 为 false，则侦听器只在冒泡阶段处理事件。要在两个阶段都侦听事件，请调用 on() 两次：一次将 useCapture 设置为 true，一次将 useCapture 设置为 false。"
				},
				{
					"name": "priority",
					"question": true,
					"type": "number",
					"description": "事件侦听器的优先级。优先级由一个带符号的整数指定。数字越大，优先级越高。优先级为 n 的所有侦听器会在优先级为 n -1 的侦听器之前得到处理。如果两个或更多个侦听器共享相同的优先级，则按照它们的添加顺序进行处理。默认优先级为 0。"
				}
			],
			"inherited": true,
			"inherits": "egret.EventDispatcher",
			"description": "使用 EventDispatcher 对象注册事件侦听器对象，以使侦听器能够接收事件通知。可以为特定类型的事件、阶段和优先级在显示列表的所有节点上注册事件侦听器。成功注册一个事件侦听器后，无法通过额外调用 on() 来更改其优先级。要更改侦听器的优先级，必须先调用 removeEventListener()。然后，可以使用新的优先级再次注册该侦听器。注册该侦听器后，如果继续调用具有不同 type 或 useCapture值的 on()，则会创建单独的侦听器注册。<br/>如果不再需要某个事件侦听器，可调用 EventDispatcher.removeEventListener()删除它；否则会产生内存问题。由于垃圾回收器不会删除仍包含引用的对象，因此不会从内存中自动删除使用已注册事件侦听器的对象。复制EventDispatcher 实例时并不复制其中附加的事件侦听器。（如果新近创建的节点需要一个事件侦听器，必须在创建该节点后附加该侦听器。）但是，如果移动 EventDispatcher 实例，则其中附加的事件侦听器也会随之移动。如果在正在处理事件的节点上注册事件侦听器，则不会在当前阶段触发事件侦听器，但会在事件流的稍后阶段触发，如冒泡阶段。如果从正在处理事件的节点中删除事件侦听器，则该事件侦听器仍由当前操作触发。删除事件侦听器后，决不会再次调用该事件侦听器（除非再次注册以备将来处理）。",
			"see": [
				"#once()",
				"#removeEventListener()"
			]
		},
		{
			"kind": "function",
			"type": "void",
			"name": "addSkeletonData",
			"memberof": "dragonBones.BaseFactory",
			"scope": "instance",
			"description": "添加一个DragonBonesData实例（不推荐使用）建议使用方法addDragonBonesData来代替",
			"params": [
				{
					"name": "data",
					"type": "dragonBones.DragonBonesData",
					"description": ""
				},
				{
					"name": "name",
					"type": "string",
					"default": "null",
					"description": ""
				}
			],
			"inherited": true,
			"inherits": "dragonBones.BaseFactory"
		},
		{
			"kind": "function",
			"type": "void",
			"name": "addTextureAtlas",
			"memberof": "dragonBones.BaseFactory",
			"scope": "instance",
			"description": "添加一个纹理集",
			"params": [
				{
					"name": "textureAtlas",
					"type": "any",
					"description": "需要被添加的纹理集"
				},
				{
					"name": "name",
					"type": "string",
					"default": "null",
					"description": "(optional) 需要被添加的纹理集的名字"
				}
			],
			"inherited": true,
			"inherits": "dragonBones.BaseFactory"
		},
		{
			"kind": "function",
			"type": "dragonBones.Armature",
			"name": "buildArmature",
			"memberof": "dragonBones.BaseFactory",
			"scope": "instance",
			"description": "构建骨架一般情况下dragonBonesData和textureAtlas是一对一的，通过相同的key对应。",
			"returns": "",
			"params": [
				{
					"name": "armatureName",
					"type": "string",
					"description": "骨架的名字"
				},
				{
					"name": "fromDragonBonesDataName",
					"type": "string",
					"default": "null",
					"description": "骨架数据的名字 可选参数"
				},
				{
					"name": "fromTextureAtlasName",
					"type": "string",
					"default": "null",
					"description": "纹理集的名字 可选参数"
				},
				{
					"name": "skinName",
					"type": "string",
					"default": "null",
					"description": "皮肤的名字 可选参数"
				}
			],
			"inherited": true,
			"inherits": "dragonBones.BaseFactory"
		},
		{
			"kind": "function",
			"type": "dragonBones.Armature",
			"name": "buildArmatureUsingArmatureDataFromTextureAtlas",
			"memberof": "dragonBones.BaseFactory",
			"scope": "instance",
			"description": "用dragonBones数据，骨架数据，纹理集数据来构建骨架",
			"returns": "",
			"params": [
				{
					"name": "dragonBonesData",
					"type": "dragonBones.DragonBonesData",
					"description": "dragonBones数据"
				},
				{
					"name": "armatureData",
					"type": "dragonBones.ArmatureData",
					"description": "骨架数据"
				},
				{
					"name": "textureAtlasName",
					"type": "string",
					"description": ""
				},
				{
					"name": "skinName",
					"type": "string",
					"default": "null",
					"description": "皮肤名称 可选参数"
				}
			],
			"inherited": true,
			"inherits": "dragonBones.BaseFactory"
		},
		{
			"kind": "function",
			"type": "dragonBones.FastArmature",
			"name": "buildFastArmature",
			"memberof": "dragonBones.BaseFactory",
			"scope": "instance",
			"description": "构建fast骨架一般情况下dragonBonesData和textureAtlas是一对一的，通过相同的key对应。",
			"returns": "",
			"params": [
				{
					"name": "armatureName",
					"type": "string",
					"description": "骨架的名字"
				},
				{
					"name": "fromDragonBonesDataName",
					"type": "string",
					"default": "null",
					"description": "骨架数据的名字 可选参数"
				},
				{
					"name": "fromTextureAtlasName",
					"type": "string",
					"default": "null",
					"description": "纹理集的名字 可选参数"
				},
				{
					"name": "skinName",
					"type": "string",
					"default": "null",
					"description": "皮肤的名字 可选参数"
				}
			],
			"inherited": true,
			"inherits": "dragonBones.BaseFactory"
		},
		{
			"kind": "function",
			"type": "dragonBones.FastArmature",
			"name": "buildFastArmatureUsingArmatureDataFromTextureAtlas",
			"memberof": "dragonBones.BaseFactory",
			"scope": "instance",
			"description": "用dragonBones数据，骨架数据，纹理集数据来构建骨架",
			"returns": "",
			"params": [
				{
					"name": "dragonBonesData",
					"type": "dragonBones.DragonBonesData",
					"description": "dragonBones数据"
				},
				{
					"name": "armatureData",
					"type": "dragonBones.ArmatureData",
					"description": "骨架数据"
				},
				{
					"name": "textureAtlasName",
					"type": "string",
					"description": ""
				},
				{
					"name": "skinName",
					"type": "string",
					"default": "null",
					"description": "皮肤名称 可选参数"
				}
			],
			"inherited": true,
			"inherits": "dragonBones.BaseFactory"
		},
		{
			"kind": "function",
			"type": "boolean",
			"name": "copyAnimationsToArmature",
			"memberof": "dragonBones.BaseFactory",
			"scope": "instance",
			"description": "拷贝动画到骨架中暂时不支持ifRemoveOriginalAnimationList为false的情况",
			"returns": "",
			"params": [
				{
					"name": "toArmature",
					"type": "dragonBones.Armature",
					"description": "拷贝到的那个骨架"
				},
				{
					"name": "fromArmatreName",
					"type": "string",
					"description": "从哪个骨架里拷贝，骨架的名字"
				},
				{
					"name": "fromDragonBonesDataName",
					"type": "string",
					"default": "null",
					"description": "从哪个DragonBones数据中拷贝，Dragonbones数据的名字"
				},
				{
					"name": "ifRemoveOriginalAnimationList",
					"type": "boolean",
					"default": "true",
					"description": "是否移除原骨架里的动画，暂时不支持为false的情况"
				}
			],
			"inherited": true,
			"inherits": "dragonBones.BaseFactory"
		},
		{
			"kind": "function",
			"type": "boolean",
			"name": "dispatchEvent",
			"memberof": "egret.EventDispatcher",
			"scope": "instance",
			"inheritDoc": true,
			"version": "Egret 2.4",
			"platform": "Web,Native",
			"params": [
				{
					"name": "event",
					"type": "egret.Event",
					"description": "调度到事件流中的 Event 对象。"
				}
			],
			"inherited": true,
			"inherits": "egret.EventDispatcher",
			"description": "将事件分派到事件流中。事件目标是对其调用 dispatchEvent() 方法的 EventDispatcher 对象。",
			"returns": "如果成功调度了事件，则值为 true。值 false 表示失败或对事件调用了 preventDefault()。"
		},
		{
			"kind": "function",
			"type": "boolean",
			"name": "dispatchEventWith",
			"memberof": "egret.EventDispatcher",
			"scope": "instance",
			"description": "派发一个指定参数的事件。",
			"version": "Egret 2.4",
			"platform": "Web,Native",
			"params": [
				{
					"name": "type",
					"type": "string",
					"description": "事件类型"
				},
				{
					"name": "bubbles",
					"question": true,
					"type": "boolean",
					"description": "确定 Event 对象是否参与事件流的冒泡阶段。默认值为 false。"
				},
				{
					"name": "data",
					"question": true,
					"type": "any",
					"description": "事件data"
				}
			],
			"inherited": true,
			"inherits": "egret.EventDispatcher"
		},
		{
			"kind": "function",
			"type": "void",
			"name": "dispose",
			"memberof": "dragonBones.BaseFactory",
			"scope": "instance",
			"description": "释放资源",
			"params": [
				{
					"name": "disposeData",
					"type": "boolean",
					"default": "true",
					"description": "(optional) 是否释放所有内部的引用"
				}
			],
			"inherited": true,
			"inherits": "dragonBones.BaseFactory"
		},
		{
			"kind": "function",
			"type": "dragonBones.DragonBonesData",
			"name": "getDragonBonesData",
			"memberof": "dragonBones.BaseFactory",
			"scope": "instance",
			"description": "根据名字获取一个DragonBonesData",
			"returns": "返回指定名字的DragonBonesData（如果存在的话）",
			"params": [
				{
					"name": "name",
					"type": "string",
					"description": "想要获取的DragonBonesData的名字"
				}
			],
			"inherited": true,
			"inherits": "dragonBones.BaseFactory"
		},
		{
			"kind": "function",
			"type": "dragonBones.DragonBonesData",
			"name": "getSkeletonData",
			"memberof": "dragonBones.BaseFactory",
			"scope": "instance",
			"description": "根据名字获取一个DragonBonesData（不推荐使用）建议使用方法getDragonBonesData来代替这个方法",
			"params": [
				{
					"name": "name",
					"type": "string",
					"description": ""
				}
			],
			"inherited": true,
			"inherits": "dragonBones.BaseFactory"
		},
		{
			"kind": "function",
			"type": "any",
			"name": "getTextureAtlas",
			"memberof": "dragonBones.BaseFactory",
			"scope": "instance",
			"description": "根据名字获取纹理集TextureAtlas",
			"returns": "纹理集TextureAtlas",
			"params": [
				{
					"name": "name",
					"type": "string",
					"description": "需要获取的纹理集TextureAtlas的名字"
				}
			],
			"inherited": true,
			"inherits": "dragonBones.BaseFactory"
		},
		{
			"kind": "function",
			"type": "any",
			"name": "getTextureDisplay",
			"memberof": "dragonBones.BaseFactory",
			"scope": "instance",
			"description": "获取TextureDisplay",
			"returns": "返回的TextureDisplay",
			"params": [
				{
					"name": "textureName",
					"type": "string",
					"description": "纹理的名字"
				},
				{
					"name": "textureAtlasName",
					"type": "string",
					"default": "null",
					"description": "纹理集的名字"
				},
				{
					"name": "pivotX",
					"type": "number",
					"default": "NaN",
					"description": "轴点的x坐标"
				},
				{
					"name": "pivotY",
					"type": "number",
					"default": "NaN",
					"description": "轴点的y坐标"
				}
			],
			"inherited": true,
			"inherits": "dragonBones.BaseFactory"
		},
		{
			"kind": "function",
			"type": "boolean",
			"name": "hasEventListener",
			"memberof": "egret.EventDispatcher",
			"scope": "instance",
			"inheritDoc": true,
			"version": "Egret 2.4",
			"platform": "Web,Native",
			"params": [
				{
					"name": "type",
					"type": "string",
					"description": "事件的类型。"
				}
			],
			"inherited": true,
			"inherits": "egret.EventDispatcher",
			"description": "检查 EventDispatcher 对象是否为特定事件类型注册了任何侦听器。这样，您就可以确定 EventDispatcher 对象在事件流层次结构中的哪个位置改变了对事件类型的处理。要确定特定事件类型是否确实会触发事件侦听器，请使用 IEventDispatcher.willTrigger()。hasEventListener()与 willTrigger() 的区别是：hasEventListener() 只检查它所属的对象，而 willTrigger() 检查整个事件流以查找由 type 参数指定的事件。",
			"returns": "如果指定类型的侦听器已注册，则值为 true；否则，值为 false。",
			"see": [
				"#willTrigger()"
			]
		},
		{
			"kind": "function",
			"type": "void",
			"name": "once",
			"memberof": "egret.EventDispatcher",
			"scope": "instance",
			"inheritDoc": true,
			"version": "Egret 2.4",
			"platform": "Web,Native",
			"params": [
				{
					"name": "type",
					"type": "string",
					"description": "事件的类型。"
				},
				{
					"name": "listener",
					"type": "Function",
					"description": "处理事件的侦听器函数。此函数必须接受 Event 对象作为其唯一的参数，并且不能返回任何结果，如下面的示例所示： function(evt:Event):void 函数可以有任何名称。"
				},
				{
					"name": "thisObject",
					"type": "any",
					"description": "侦听函数绑定的this对象"
				},
				{
					"name": "useCapture",
					"question": true,
					"type": "boolean",
					"description": "确定侦听器是运行于捕获阶段还是运行于冒泡阶段。如果将 useCapture 设置为 true，则侦听器只在捕获阶段处理事件，而不在冒泡阶段处理事件。如果 useCapture 为 false，则侦听器只在冒泡阶段处理事件。要在两个阶段都侦听事件，请调用 once() 两次：一次将 useCapture 设置为 true，一次将 useCapture 设置为 false。"
				},
				{
					"name": "priority",
					"question": true,
					"type": "number",
					"description": "事件侦听器的优先级。优先级由一个带符号整数指定。数字越大，优先级越高。优先级为 n 的所有侦听器会在优先级为 n -1 的侦听器之前得到处理。如果两个或更多个侦听器共享相同的优先级，则按照它们的添加顺序进行处理。默认优先级为 0。"
				}
			],
			"inherited": true,
			"inherits": "egret.EventDispatcher",
			"description": "添加仅回调一次的事件侦听器，此方法与on()方法不同，on()方法会持续产生回调，而此方法在第一次回调时就会自动移除监听。",
			"see": [
				"#on()",
				"#removeEventListener()"
			]
		},
		{
			"kind": "function",
			"type": "void",
			"name": "removeDragonBonesData",
			"memberof": "dragonBones.BaseFactory",
			"scope": "instance",
			"description": "根据名字移除一个DragonBonesData实例.",
			"params": [
				{
					"name": "name",
					"type": "string",
					"description": "想要移除的DragonBonesData的名字"
				}
			],
			"inherited": true,
			"inherits": "dragonBones.BaseFactory"
		},
		{
			"kind": "function",
			"type": "void",
			"name": "removeEventListener",
			"memberof": "egret.EventDispatcher",
			"scope": "instance",
			"inheritDoc": true,
			"version": "Egret 2.4",
			"platform": "Web,Native",
			"params": [
				{
					"name": "type",
					"type": "string",
					"description": "事件的类型。"
				},
				{
					"name": "listener",
					"type": "Function",
					"description": "要删除的侦听器对象"
				},
				{
					"name": "thisObject",
					"type": "any",
					"description": "侦听函数绑定的this对象"
				},
				{
					"name": "useCapture",
					"question": true,
					"type": "boolean",
					"description": "指出是为捕获阶段还是为冒泡阶段注册了侦听器。如果为捕获阶段以及冒泡阶段注册了侦听器，则需要对removeEventListener() 进行两次调用才能将这两个侦听器删除：一次调用将 useCapture 设置为 true，另一次调用将 useCapture 设置为 false。。"
				}
			],
			"inherited": true,
			"inherits": "egret.EventDispatcher",
			"description": "从 EventDispatcher 对象中删除侦听器。如果没有向 EventDispatcher 对象注册任何匹配的侦听器，则对此方法的调用没有任何效果。"
		},
		{
			"kind": "function",
			"type": "void",
			"name": "removeSkeletonData",
			"memberof": "dragonBones.BaseFactory",
			"scope": "instance",
			"description": "根据名字移除一个DragonBonesData实例.（不推荐使用）建议使用方法removeDragonBonesData代替",
			"params": [
				{
					"name": "name",
					"type": "string",
					"description": ""
				}
			],
			"inherited": true,
			"inherits": "dragonBones.BaseFactory"
		},
		{
			"kind": "function",
			"type": "void",
			"name": "removeTextureAtlas",
			"memberof": "dragonBones.BaseFactory",
			"scope": "instance",
			"description": "移除指定名字的纹理集",
			"params": [
				{
					"name": "name",
					"type": "string",
					"description": "需要移除的纹理集的名字"
				}
			],
			"inherited": true,
			"inherits": "dragonBones.BaseFactory"
		},
		{
			"kind": "function",
			"type": "boolean",
			"name": "willTrigger",
			"memberof": "egret.EventDispatcher",
			"scope": "instance",
			"inheritDoc": true,
			"version": "Egret 2.4",
			"platform": "Web,Native",
			"params": [
				{
					"name": "type",
					"type": "string",
					"description": "事件类型"
				}
			],
			"inherited": true,
			"inherits": "egret.EventDispatcher",
			"description": "检查是否用此 EventDispatcher 对象或其任何始祖为指定事件类型注册了事件侦听器。将指定类型的事件调度给此EventDispatcher 对象或其任一后代时，如果在事件流的任何阶段触发了事件侦听器，则此方法返回 true。hasEventListener() 与 willTrigger() 方法的区别是：hasEventListener() 只检查它所属的对象，而 willTrigger() 方法检查整个事件流以查找由 type 参数指定的事件。",
			"returns": "是否注册过监听器，如果注册过返回true，反之返回false",
			"see": [
				"#hasEventListener()"
			]
		}
	],
	"globalMember": [],
	"globalFunction": [],
	"class": {
		"kind": "class",
		"name": "EgretFactory",
		"memberof": "dragonBones",
		"filename": "extension/dragonbones/egret/EgretFactory.ts",
		"description": "Egret引擎中DragonBones工厂的基类实现",
		"augments": [
			"dragonBones.BaseFactory",
			"dragonBones.EventDispatcher",
			"egret.EventDispatcher",
			"egret.HashObject"
		]
	}
}