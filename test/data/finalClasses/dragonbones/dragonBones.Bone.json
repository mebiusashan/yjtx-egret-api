{
	"member": [
		{
			"kind": "member",
			"type": "boolean",
			"name": "applyOffsetRotationToChild",
			"memberof": "dragonBones.Bone",
			"scope": "instance",
			"description": "标记是否将offset中的旋转分量作用到子骨头默认值：true",
			"see": [
				"dragonBones.Bone#offset"
			],
			"pType": "public",
			"default": "true"
		},
		{
			"kind": "member",
			"type": "boolean",
			"name": "applyOffsetScaleToChild",
			"memberof": "dragonBones.Bone",
			"scope": "instance",
			"description": "标记是否将offset中的缩放分量作用到子骨头默认值：true",
			"see": [
				"dragonBones.Bone#offset"
			],
			"pType": "public",
			"default": "false"
		},
		{
			"kind": "member",
			"type": "boolean",
			"name": "applyOffsetTranslationToChild",
			"memberof": "dragonBones.Bone",
			"scope": "instance",
			"description": "标记是否将offset中的平移分量作用到子骨头默认值：true",
			"see": [
				"dragonBones.Bone#offset"
			],
			"pType": "public",
			"default": "true"
		},
		{
			"kind": "member",
			"type": "dragonBones.Armature",
			"name": "armature",
			"memberof": "dragonBones.DBObject",
			"scope": "instance",
			"rwType": 1,
			"description": "The armature this DBObject instance belongs to.",
			"pType": "public",
			"inherited": true,
			"inherits": "dragonBones.DBObject"
		},
		{
			"kind": "member",
			"type": "dragonBones.Armature",
			"name": "childArmature",
			"memberof": "dragonBones.Bone",
			"scope": "instance",
			"rwType": 1,
			"description": "不推荐的API,建议使用 slot.childArmature 替代",
			"pType": "public"
		},
		{
			"kind": "member",
			"type": "any",
			"name": "display",
			"memberof": "dragonBones.Bone",
			"scope": "instance",
			"description": "不推荐的API,建议使用 slot.display 替代",
			"pType": "public"
		},
		{
			"kind": "member",
			"type": "string",
			"name": "displayController",
			"memberof": "dragonBones.Bone",
			"scope": "instance",
			"description": "display控制者的名字，该名字对应一个 AnimationState 实例。当动画中有多个 AnimationState 存在时，我们可以通过指定 displayController 实现只有某个 AnimationState 能够控制 display 的切换。默认值：null。意味着所有 AnimationState 都能控制display的切换",
			"see": [
				"dragonBones.AnimationState."
			],
			"pType": "public"
		},
		{
			"kind": "member",
			"type": "dragonBones.DBTransform",
			"name": "global",
			"memberof": "dragonBones.DBObject",
			"scope": "instance",
			"rwType": 1,
			"description": "相对世界坐标的 DBTransform 实例。",
			"pType": "public",
			"inherited": true,
			"inherits": "dragonBones.DBObject"
		},
		{
			"kind": "member",
			"type": "boolean",
			"name": "inheritRotation",
			"memberof": "dragonBones.DBObject",
			"scope": "instance",
			"description": "是否继承父亲的旋转属性。",
			"pType": "public",
			"inherited": true,
			"inherits": "dragonBones.DBObject"
		},
		{
			"kind": "member",
			"type": "boolean",
			"name": "inheritScale",
			"memberof": "dragonBones.DBObject",
			"scope": "instance",
			"description": "是否继承父亲的缩放属性。",
			"pType": "public",
			"inherited": true,
			"inherits": "dragonBones.DBObject"
		},
		{
			"kind": "member",
			"type": "boolean",
			"name": "inheritTranslation",
			"memberof": "dragonBones.DBObject",
			"scope": "instance",
			"description": "是否继承父亲的平移属性。",
			"pType": "public",
			"inherited": true,
			"inherits": "dragonBones.DBObject"
		},
		{
			"kind": "member",
			"type": "string",
			"name": "name",
			"memberof": "dragonBones.DBObject",
			"scope": "instance",
			"pType": "public",
			"inherited": true,
			"inherits": "dragonBones.DBObject"
		},
		{
			"kind": "member",
			"type": "dragonBones.DBTransform",
			"name": "node",
			"memberof": "dragonBones.Bone",
			"scope": "instance",
			"rwType": 1,
			"description": "不推荐的API,建议使用 offset 替代",
			"pType": "public"
		},
		{
			"kind": "member",
			"type": "dragonBones.DBTransform",
			"name": "offset",
			"memberof": "dragonBones.DBObject",
			"scope": "instance",
			"rwType": 1,
			"description": "用于运行时动态调整的 DBTransform 实例。",
			"pType": "public",
			"inherited": true,
			"inherits": "dragonBones.DBObject"
		},
		{
			"kind": "member",
			"type": "dragonBones.DBTransform",
			"name": "origin",
			"memberof": "dragonBones.DBObject",
			"scope": "instance",
			"rwType": 1,
			"description": "骨架数据中的原始的相对父亲的 DBTransform 实例。",
			"pType": "public",
			"inherited": true,
			"inherits": "dragonBones.DBObject"
		},
		{
			"kind": "member",
			"type": "dragonBones.Bone",
			"name": "parent",
			"memberof": "dragonBones.DBObject",
			"scope": "instance",
			"rwType": 1,
			"description": "Indicates the Bone instance that directly contains this DBObject instance if any.",
			"pType": "public",
			"inherited": true,
			"inherits": "dragonBones.DBObject"
		},
		{
			"kind": "member",
			"type": "dragonBones.Slot",
			"name": "slot",
			"memberof": "dragonBones.Bone",
			"scope": "instance",
			"rwType": 1,
			"description": "返回当前 Bone 实例包含的第一个 Slot 实例",
			"pType": "public"
		},
		{
			"kind": "member",
			"type": "any",
			"name": "userData",
			"memberof": "dragonBones.DBObject",
			"scope": "instance",
			"description": "存储额外的用户数据。",
			"pType": "public",
			"inherited": true,
			"inherits": "dragonBones.DBObject"
		}
	],
	"function": [
		{
			"kind": "function",
			"name": "Bone",
			"memberof": "dragonBones.Bone",
			"scope": "instance",
			"pType": "public"
		},
		{
			"kind": "function",
			"type": "void",
			"name": "addChildBone",
			"memberof": "dragonBones.Bone",
			"scope": "instance",
			"description": "添加指定的 Bone 实例做为当前 Bone 实例的子骨头",
			"params": [
				{
					"name": "childBone",
					"type": "dragonBones.Bone",
					"description": "需要添加的 Bone 实例"
				},
				{
					"name": "updateLater",
					"type": "boolean",
					"default": "false",
					"description": "是否延迟更新。默认false。当需要一次性添加很多 Bone 时，开启延迟更新能够提高效率"
				}
			],
			"pType": "public"
		},
		{
			"kind": "function",
			"type": "void",
			"name": "addSlot",
			"memberof": "dragonBones.Bone",
			"scope": "instance",
			"description": "向当前 Bone 实例中添加指定的 Slot 实例",
			"params": [
				{
					"name": "childSlot",
					"type": "dragonBones.Slot",
					"description": "需要添加的 Slot 实例"
				}
			],
			"pType": "public"
		},
		{
			"kind": "function",
			"type": "boolean",
			"name": "contains",
			"memberof": "dragonBones.Bone",
			"scope": "instance",
			"description": "检查是否包含指定的 Bone 或者 Slot",
			"returns": "",
			"params": [
				{
					"name": "child",
					"type": "dragonBones.DBObject",
					"description": "Bone 实例 或者 Slot 实例"
				}
			],
			"pType": "public"
		},
		{
			"kind": "function",
			"type": "void",
			"name": "dispose",
			"memberof": "dragonBones.Bone",
			"scope": "instance",
			"inheritDoc": true,
			"pType": "public",
			"description": "清理使用的资源用于垃圾回收"
		},
		{
			"kind": "function",
			"type": "Array<dragonBones.Bone>",
			"name": "getBones",
			"memberof": "dragonBones.Bone",
			"scope": "instance",
			"description": "获取当前骨头包含的所有 Bone 实例",
			"returns": "",
			"params": [
				{
					"name": "returnCopy",
					"type": "boolean",
					"default": "true",
					"description": "是否返回拷贝。默认：true"
				}
			],
			"pType": "public"
		},
		{
			"kind": "function",
			"type": "Array<dragonBones.Slot>",
			"name": "getSlots",
			"memberof": "dragonBones.Bone",
			"scope": "instance",
			"description": "获取当前骨头包含的所有 Slot 实例",
			"returns": "",
			"params": [
				{
					"name": "returnCopy",
					"type": "boolean",
					"default": "true",
					"description": "是否返回拷贝。默认：true"
				}
			],
			"pType": "public"
		},
		{
			"kind": "function",
			"type": "dragonBones.Bone",
			"name": "initWithBoneData",
			"memberof": "dragonBones.Bone",
			"scope": "static",
			"params": [
				{
					"name": "boneData",
					"type": "dragonBones.BoneData",
					"description": ""
				}
			],
			"pType": "public"
		},
		{
			"kind": "function",
			"type": "void",
			"name": "invalidUpdate",
			"memberof": "dragonBones.Bone",
			"scope": "instance",
			"description": "在下一帧强制更新当前 Bone 实例及其包含的所有 Slot 的动画。",
			"pType": "public"
		},
		{
			"kind": "function",
			"type": "void",
			"name": "removeChildBone",
			"memberof": "dragonBones.Bone",
			"scope": "instance",
			"description": "从当前 Bone 实例中移除指定的子骨头",
			"params": [
				{
					"name": "childBone",
					"type": "dragonBones.Bone",
					"description": "需要移除的 Bone 实例"
				},
				{
					"name": "updateLater",
					"type": "boolean",
					"default": "false",
					"description": "是否延迟更新。默认false。当需要一次性移除很多 Bone 时，开启延迟更新能够提高效率"
				}
			],
			"pType": "public"
		},
		{
			"kind": "function",
			"type": "void",
			"name": "removeSlot",
			"memberof": "dragonBones.Bone",
			"scope": "instance",
			"description": "从当前 Bone 实例中移除指定的 Slot 实例",
			"params": [
				{
					"name": "childSlot",
					"type": "dragonBones.Slot",
					"description": "需要移除的 Slot 实例"
				}
			],
			"pType": "public"
		}
	],
	"globalMember": [],
	"globalFunction": [],
	"class": {
		"kind": "class",
		"name": "Bone",
		"memberof": "dragonBones",
		"filename": "extension/dragonbones/core/armature/Bone.ts",
		"description": "Bone 实例代表 Armature 中的一个骨头。一个Armature实例可以由很多 Bone组成。Bone 在骨骼动画体系中是最重要的逻辑单元之一，负责动画中的平移旋转缩放的实现",
		"see": [
			"dragonBones.Armature",
			"dragonBones.Slot",
			"dragonBones.BoneData"
		],
		"example": "<pre><br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//获取动画数据&nbsp;本例使用Knight例子.<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//资源下载地址http://dragonbones.github.io/download_forwarding.html?download_url=downloads/dragonbonesdemos_v2.4.zip<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;skeletonData&nbsp;=&nbsp;RES.getRes(&quot;skeleton&quot;);<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//获取纹理集数据<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;textureData&nbsp;=&nbsp;RES.getRes(&quot;textureConfig&quot;);<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//获取纹理集图片<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;texture&nbsp;=&nbsp;RES.getRes(&quot;texture&quot;);<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//这个资源需要自己准备<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;horseHat&nbsp;=&nbsp;RES.getRes(&quot;horseHat&quot;);<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//创建一个工厂，用来创建Armature<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;factory:dragonBones.EgretFactory&nbsp;=&nbsp;new&nbsp;dragonBones.EgretFactory();<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//把动画数据添加到工厂里<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;factory.addSkeletonData(dragonBones.DataParser.parseDragonBonesData(skeletonData));<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//把纹理集数据和图片添加到工厂里<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;factory.addTextureAtlas(new&nbsp;dragonBones.EgretTextureAtlas(texture,&nbsp;textureData));<br/><br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//获取Armature的名字，dragonBones4.0的数据可以包含多个骨架，这里取第一个Armature<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;armatureName:string&nbsp;=&nbsp;skeletonData.armature[1].name;<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//从工厂里创建出Armature<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;armature:dragonBones.Armature&nbsp;=&nbsp;factory.buildArmature(armatureName);<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//获取装载Armature的容器<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;armatureDisplay&nbsp;=&nbsp;armature.display;<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//把它添加到舞台上<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;armatureDisplay.x&nbsp;=&nbsp;200;<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;armatureDisplay.y&nbsp;=&nbsp;300;<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this.addChild(armatureDisplay);<br/><br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//以下四句代码，实现给骨骼添加slot的功能<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//1.获取马头的骨骼<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;horseHead:dragonBones.Bone&nbsp;=&nbsp;armature.getBone(&quot;horseHead&quot;);<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//2.创建一个slot<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;horseHatSlot:dragonBones.EgretSlot&nbsp;=&nbsp;new&nbsp;dragonBones.EgretSlot();<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//3.给这个slot赋一个图片<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;horseHatSlot.display&nbsp;=&nbsp;new&nbsp;egret.Bitmap(horseHat);<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//4.把这个slot添加到骨骼上<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;horseHead.addSlot(horseHatSlot);<br/><br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//以下3句代码，实现了子骨骼的获取和播放子骨架的动画<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//1.获取包含子骨架的骨骼<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;weaponBone:dragonBones.Bone&nbsp;=&nbsp;armature.getBone(&quot;armOutside&quot;);<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//2.获取骨骼上的子骨架<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;childArmature:dragonBones.Armature&nbsp;=&nbsp;weaponBone.childArmature;<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//3.播放子骨架的动画<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;childArmature.animation.gotoAndPlay(&quot;attack_sword_1&quot;,0,-1,0);<br/><br/><br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//取得这个Armature动画列表中的第一个动画的名字<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;curAnimationName&nbsp;=&nbsp;armature.animation.animationList[0];<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;armature.animation.gotoAndPlay(curAnimationName,0.3,-1,0);<br/><br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//把Armature添加到心跳时钟里<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dragonBones.WorldClock.clock.add(armature);<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//心跳时钟开启<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;egret.Ticker.getInstance().register(function&nbsp;(advancedTime)&nbsp;{<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dragonBones.WorldClock.clock.advanceTime(advancedTime&nbsp;/&nbsp;1000);<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;},&nbsp;this);<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</pre>",
		"augments": [
			"dragonBones.DBObject"
		]
	}
}