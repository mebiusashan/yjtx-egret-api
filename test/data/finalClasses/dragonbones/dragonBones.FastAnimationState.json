{
	"member": [
		{
			"kind": "member",
			"type": "dragonBones.AnimationCache",
			"name": "animationCache",
			"memberof": "dragonBones.FastAnimationState",
			"scope": "instance",
			"pType": "public"
		},
		{
			"kind": "member",
			"type": "dragonBones.AnimationData",
			"name": "animationData",
			"memberof": "dragonBones.FastAnimationState",
			"scope": "instance",
			"pType": "public"
		},
		{
			"kind": "member",
			"type": "boolean",
			"name": "autoTween",
			"memberof": "dragonBones.FastAnimationState",
			"scope": "instance",
			"description": "是否自动补间。",
			"pType": "public"
		},
		{
			"kind": "member",
			"type": "number",
			"name": "currentPlayTimes",
			"memberof": "dragonBones.FastAnimationState",
			"scope": "instance",
			"rwType": 1,
			"description": "当前播放次数",
			"pType": "public"
		},
		{
			"kind": "member",
			"type": "number",
			"name": "currentTime",
			"memberof": "dragonBones.FastAnimationState",
			"scope": "instance",
			"rwType": 1,
			"description": "动画当前播放时间（单位：秒）",
			"pType": "public"
		},
		{
			"kind": "member",
			"type": "boolean",
			"name": "isComplete",
			"memberof": "dragonBones.FastAnimationState",
			"scope": "instance",
			"rwType": 1,
			"description": "是否播放完成",
			"pType": "public"
		},
		{
			"kind": "member",
			"type": "boolean",
			"name": "isPlaying",
			"memberof": "dragonBones.FastAnimationState",
			"scope": "instance",
			"rwType": 1,
			"description": "是否正在播放",
			"pType": "public"
		},
		{
			"kind": "member",
			"type": "string",
			"name": "name",
			"memberof": "dragonBones.FastAnimationState",
			"scope": "instance",
			"pType": "public"
		},
		{
			"kind": "member",
			"type": "number",
			"name": "playTimes",
			"memberof": "dragonBones.FastAnimationState",
			"scope": "instance",
			"rwType": 1,
			"description": "播放次数 (0:循环播放， >0:播放次数)",
			"pType": "public"
		},
		{
			"kind": "member",
			"type": "number",
			"name": "progress",
			"memberof": "dragonBones.FastAnimationState",
			"scope": "instance",
			"rwType": 1,
			"description": "动画播放进度",
			"pType": "public"
		},
		{
			"kind": "member",
			"type": "number",
			"name": "totalTime",
			"memberof": "dragonBones.FastAnimationState",
			"scope": "instance",
			"rwType": 1,
			"description": "动画总时长（单位：秒）",
			"pType": "public"
		}
	],
	"function": [
		{
			"kind": "function",
			"name": "FastAnimationState",
			"memberof": "dragonBones.FastAnimationState",
			"scope": "instance",
			"pType": "public"
		},
		{
			"kind": "function",
			"type": "void",
			"name": "dispose",
			"memberof": "dragonBones.FastAnimationState",
			"scope": "instance",
			"pType": "public"
		},
		{
			"kind": "function",
			"type": "boolean",
			"name": "isUseCache",
			"memberof": "dragonBones.FastAnimationState",
			"scope": "instance",
			"description": "是否使用缓存",
			"pType": "public"
		},
		{
			"kind": "function",
			"type": "dragonBones.FastAnimationState",
			"name": "play",
			"memberof": "dragonBones.FastAnimationState",
			"scope": "instance",
			"description": "播放当前动画。如果动画已经播放完毕, 将不会继续播放.",
			"returns": "动画播放状态实例",
			"pType": "public"
		},
		{
			"kind": "function",
			"type": "dragonBones.FastAnimationState",
			"name": "setCurrentTime",
			"memberof": "dragonBones.FastAnimationState",
			"scope": "instance",
			"params": [
				{
					"name": "value",
					"type": "number",
					"description": ""
				}
			],
			"pType": "public"
		},
		{
			"kind": "function",
			"type": "dragonBones.FastAnimationState",
			"name": "stop",
			"memberof": "dragonBones.FastAnimationState",
			"scope": "instance",
			"description": "暂停当前动画的播放。",
			"returns": "动画播放状态实例",
			"pType": "public"
		}
	],
	"globalMember": [],
	"globalFunction": [],
	"class": {
		"kind": "class",
		"name": "FastAnimationState",
		"memberof": "dragonBones",
		"filename": "../../../Egret/egret-core/egret-core-master/src/extension/dragonbones/core/fast/animation/FastAnimationState.ts",
		"description": "FastAnimationState 实例代表播放的动画， 可以对单个动画的播放进行最细致的调节。",
		"see": [
			"dragonBones.Animation",
			"dragonBones.AnimationData"
		],
		"example": "<pre><br/>\t&nbsp;&nbsp;&nbsp;&nbsp;//获取动画数据<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;skeletonData&nbsp;=&nbsp;RES.getRes(&quot;skeleton&quot;);<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//获取纹理集数据<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;textureData&nbsp;=&nbsp;RES.getRes(&quot;textureConfig&quot;);<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//获取纹理集图片<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;texture&nbsp;=&nbsp;RES.getRes(&quot;texture&quot;);<br/>\t&nbsp;&nbsp;<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//创建一个工厂，用来创建Armature<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;factory:dragonBones.EgretFactory&nbsp;=&nbsp;new&nbsp;dragonBones.EgretFactory();<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//把动画数据添加到工厂里<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;factory.addSkeletonData(dragonBones.DataParser.parseDragonBonesData(skeletonData));<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//把纹理集数据和图片添加到工厂里<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;factory.addTextureAtlas(new&nbsp;dragonBones.EgretTextureAtlas(texture,&nbsp;textureData));<br/>\t&nbsp;&nbsp;<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//获取Armature的名字，dragonBones4.0的数据可以包含多个骨架，这里取第一个Armature<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;armatureName:string&nbsp;=&nbsp;skeletonData.armature[0].name;<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//从工厂里创建出Armature<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;armature:dragonBones.FastArmature&nbsp;=&nbsp;factory.buildFastArmature(armatureName);<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//获取装载Armature的容器<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;armatureDisplay&nbsp;=&nbsp;armature.display;<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//把它添加到舞台上<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this.addChild(armatureDisplay);<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//以60fps的帧率开启动画缓存，缓存所有的动画数据<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;animationCachManager:dragonBones.AnimationCacheManager&nbsp;=&nbsp;armature.enableAnimationCache(60);<br/>\t&nbsp;&nbsp;<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//取得这个Armature动画列表中的第一个动画的名字<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;curAnimationName&nbsp;=&nbsp;armature.animation.animationList[0];<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//播放这个动画，gotoAndPlay各个参数说明<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//第一个参数&nbsp;animationName&nbsp;{string}&nbsp;指定播放动画的名称.<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//第二个参数&nbsp;fadeInTime&nbsp;{number}&nbsp;动画淡入时间&nbsp;(&gt;=&nbsp;0),&nbsp;默认值：-1&nbsp;意味着使用动画数据中的淡入时间.<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//第三个参数&nbsp;duration&nbsp;{number}&nbsp;动画播放时间。默认值：-1&nbsp;意味着使用动画数据中的播放时间.<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//第四个参数&nbsp;layTimes&nbsp;{number}&nbsp;动画播放次数(0:循环播放,&nbsp;&gt;=1:播放次数,&nbsp;NaN:使用动画数据中的播放时间),&nbsp;默认值：NaN<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;armature.animation.gotoAndPlay(curAnimationName,0.3,-1,0);<br/>\t&nbsp;&nbsp;<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//把Armature添加到心跳时钟里<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dragonBones.WorldClock.clock.add(armature);<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//心跳时钟开启<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;egret.Ticker.getInstance().register(function&nbsp;(advancedTime)&nbsp;{<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dragonBones.WorldClock.clock.advanceTime(advancedTime&nbsp;/&nbsp;1000);<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;},&nbsp;this);<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</pre>",
		"implements": [
			{
				"name": "dragonBones.IAnimationState"
			}
		]
	}
}