{
	"member": [
		{
			"kind": "member",
			"type": "dragonBones.FastAnimation",
			"name": "animation",
			"memberof": "dragonBones.FastArmature",
			"scope": "instance",
			"rwType": 1,
			"description": "An Animation instance",
			"see": [
				"dragonBones.Animation"
			],
			"pType": "public"
		},
		{
			"kind": "member",
			"type": "dragonBones.ArmatureData",
			"name": "armatureData",
			"memberof": "dragonBones.FastArmature",
			"scope": "instance",
			"rwType": 1,
			"description": "ArmatureData.",
			"see": [
				"dragonBones.ArmatureData."
			],
			"pType": "public"
		},
		{
			"kind": "member",
			"type": "any",
			"name": "display",
			"memberof": "dragonBones.FastArmature",
			"scope": "instance",
			"rwType": 1,
			"description": "Armature's display object. It's instance type depends on render engine. For example \"flash.display.DisplayObject\" or \"startling.display.DisplayObject\"",
			"pType": "public"
		},
		{
			"kind": "member",
			"type": "boolean",
			"name": "enableCache",
			"memberof": "dragonBones.FastArmature",
			"scope": "instance",
			"pType": "public"
		},
		{
			"kind": "member",
			"type": "boolean",
			"name": "enableEventDispatch",
			"memberof": "dragonBones.FastArmature",
			"scope": "instance",
			"pType": "public"
		},
		{
			"kind": "member",
			"type": "number",
			"name": "hashCode",
			"memberof": "egret.HashObject",
			"scope": "instance",
			"rwType": 1,
			"description": "返回此对象唯一的哈希值,用于唯一确定一个对象。hashCode为大于等于1的整数。",
			"version": "Egret 2.4",
			"platform": "Web,Native",
			"pType": "public",
			"inherited": true,
			"inherits": "egret.HashObject"
		},
		{
			"kind": "member",
			"type": "boolean",
			"name": "isCacheManagerExclusive",
			"memberof": "dragonBones.FastArmature",
			"scope": "instance",
			"description": "保证CacheManager是独占的前提下可以开启，开启后有助于性能提高",
			"pType": "public",
			"default": "false"
		},
		{
			"kind": "member",
			"type": "string",
			"name": "name",
			"memberof": "dragonBones.FastArmature",
			"scope": "instance",
			"description": "The name should be same with ArmatureData's name",
			"pType": "public"
		},
		{
			"kind": "member",
			"type": "Array<dragonBones.FastSlot>",
			"name": "slotHasChildArmatureList",
			"memberof": "dragonBones.FastArmature",
			"scope": "instance",
			"pType": "public"
		},
		{
			"kind": "member",
			"type": "any",
			"name": "userData",
			"memberof": "dragonBones.FastArmature",
			"scope": "instance",
			"description": "An object that can contain any user extra data.",
			"pType": "public"
		}
	],
	"function": [
		{
			"kind": "function",
			"name": "FastArmature",
			"memberof": "dragonBones.FastArmature",
			"scope": "instance",
			"params": [
				{
					"name": "display",
					"type": "any",
					"description": ""
				}
			],
			"pType": "public"
		},
		{
			"kind": "function",
			"type": "void",
			"name": "addBone",
			"memberof": "dragonBones.FastArmature",
			"scope": "instance",
			"description": "在骨架中为指定名称的 FastBone 添加一个子 FastBone.和Armature不同,FastArmature的这个方法不能在运行时动态添加骨骼",
			"params": [
				{
					"name": "bone",
					"type": "dragonBones.FastBone",
					"description": "FastBone 实例"
				},
				{
					"name": "parentName",
					"type": "string",
					"default": "null",
					"description": "父骨头名称 默认：null"
				}
			],
			"pType": "public"
		},
		{
			"kind": "function",
			"type": "void",
			"name": "addEventListener",
			"memberof": "egret.EventDispatcher",
			"scope": "instance",
			"inheritDoc": true,
			"version": "Egret 2.4",
			"platform": "Web,Native",
			"params": [
				{
					"name": "type",
					"type": "string",
					"description": "事件的类型。"
				},
				{
					"name": "listener",
					"type": "Function",
					"description": "处理事件的侦听器函数。此函数必须接受 Event 对象作为其唯一的参数，并且不能返回任何结果，如下面的示例所示： function(evt:Event):void 函数可以有任何名称。"
				},
				{
					"name": "thisObject",
					"type": "any",
					"description": "侦听函数绑定的this对象"
				},
				{
					"name": "useCapture",
					"question": true,
					"type": "boolean",
					"description": "确定侦听器是运行于捕获阶段还是运行于冒泡阶段。如果将 useCapture 设置为 true，则侦听器只在捕获阶段处理事件，而不在冒泡阶段处理事件。如果 useCapture 为 false，则侦听器只在冒泡阶段处理事件。要在两个阶段都侦听事件，请调用 on() 两次：一次将 useCapture 设置为 true，一次将 useCapture 设置为 false。"
				},
				{
					"name": "priority",
					"question": true,
					"type": "number",
					"description": "事件侦听器的优先级。优先级由一个带符号的整数指定。数字越大，优先级越高。优先级为 n 的所有侦听器会在优先级为 n -1 的侦听器之前得到处理。如果两个或更多个侦听器共享相同的优先级，则按照它们的添加顺序进行处理。默认优先级为 0。"
				}
			],
			"pType": "public",
			"inherited": true,
			"inherits": "egret.EventDispatcher",
			"description": "使用 EventDispatcher 对象注册事件侦听器对象，以使侦听器能够接收事件通知。可以为特定类型的事件、阶段和优先级在显示列表的所有节点上注册事件侦听器。成功注册一个事件侦听器后，无法通过额外调用 on() 来更改其优先级。要更改侦听器的优先级，必须先调用 removeEventListener()。然后，可以使用新的优先级再次注册该侦听器。注册该侦听器后，如果继续调用具有不同 type 或 useCapture值的 on()，则会创建单独的侦听器注册。<br/>如果不再需要某个事件侦听器，可调用 EventDispatcher.removeEventListener()删除它；否则会产生内存问题。由于垃圾回收器不会删除仍包含引用的对象，因此不会从内存中自动删除使用已注册事件侦听器的对象。复制EventDispatcher 实例时并不复制其中附加的事件侦听器。（如果新近创建的节点需要一个事件侦听器，必须在创建该节点后附加该侦听器。）但是，如果移动 EventDispatcher 实例，则其中附加的事件侦听器也会随之移动。如果在正在处理事件的节点上注册事件侦听器，则不会在当前阶段触发事件侦听器，但会在事件流的稍后阶段触发，如冒泡阶段。如果从正在处理事件的节点中删除事件侦听器，则该事件侦听器仍由当前操作触发。删除事件侦听器后，决不会再次调用该事件侦听器（除非再次注册以备将来处理）。",
			"see": [
				"#once()",
				"#removeEventListener()"
			]
		},
		{
			"kind": "function",
			"type": "void",
			"name": "addSlot",
			"memberof": "dragonBones.FastArmature",
			"scope": "instance",
			"description": "为指定名称的 FastBone 添加一个子 FastSlot.和Armature不同,FastArmature的这个方法不能在运行时动态添加插槽",
			"see": [
				"dragonBones.Bone"
			],
			"params": [
				{
					"name": "slot",
					"type": "dragonBones.FastSlot",
					"description": "FastSlot 实例"
				},
				{
					"name": "parentBoneName",
					"type": "string",
					"description": ""
				}
			],
			"pType": "public"
		},
		{
			"kind": "function",
			"type": "void",
			"name": "advanceTime",
			"memberof": "dragonBones.FastArmature",
			"scope": "instance",
			"description": "Update the animation using this method typically in an ENTERFRAME Event or with a Timer.",
			"params": [
				{
					"name": "passedTime",
					"type": "number",
					"description": ""
				}
			],
			"pType": "public"
		},
		{
			"kind": "function",
			"type": "boolean",
			"name": "dispatchEvent",
			"memberof": "egret.EventDispatcher",
			"scope": "instance",
			"inheritDoc": true,
			"version": "Egret 2.4",
			"platform": "Web,Native",
			"params": [
				{
					"name": "event",
					"type": "egret.Event",
					"description": "调度到事件流中的 Event 对象。"
				}
			],
			"pType": "public",
			"inherited": true,
			"inherits": "egret.EventDispatcher",
			"description": "将事件分派到事件流中。事件目标是对其调用 dispatchEvent() 方法的 EventDispatcher 对象。",
			"returns": "如果成功调度了事件，则值为 true。值 false 表示失败或对事件调用了 preventDefault()。"
		},
		{
			"kind": "function",
			"type": "boolean",
			"name": "dispatchEventWith",
			"memberof": "egret.EventDispatcher",
			"scope": "instance",
			"description": "派发一个指定参数的事件。",
			"version": "Egret 2.4",
			"platform": "Web,Native",
			"params": [
				{
					"name": "type",
					"type": "string",
					"description": "事件类型"
				},
				{
					"name": "bubbles",
					"question": true,
					"type": "boolean",
					"description": "确定 Event 对象是否参与事件流的冒泡阶段。默认值为 false。"
				},
				{
					"name": "data",
					"question": true,
					"type": "any",
					"description": "事件data"
				}
			],
			"pType": "public",
			"inherited": true,
			"inherits": "egret.EventDispatcher"
		},
		{
			"kind": "function",
			"type": "void",
			"name": "dispose",
			"memberof": "dragonBones.FastArmature",
			"scope": "instance",
			"description": "Cleans up any resources used by this instance.",
			"pType": "public"
		},
		{
			"kind": "function",
			"type": "dragonBones.AnimationCacheManager",
			"name": "enableAnimationCache",
			"memberof": "dragonBones.FastArmature",
			"scope": "instance",
			"description": "开启动画缓存",
			"returns": "返回缓存管理器，可以绑定到其他armature以减少内存",
			"params": [
				{
					"name": "frameRate",
					"type": "number",
					"description": ""
				},
				{
					"name": "animationList",
					"type": "Array<any>",
					"default": "null",
					"description": ""
				},
				{
					"name": "loop",
					"type": "boolean",
					"default": "true",
					"description": ""
				}
			],
			"pType": "public"
		},
		{
			"kind": "function",
			"type": "any",
			"name": "getAnimation",
			"memberof": "dragonBones.FastArmature",
			"scope": "instance",
			"description": "获取FastAnimation实例",
			"returns": "FastAnimation实例",
			"pType": "public"
		},
		{
			"kind": "function",
			"type": "dragonBones.FastBone",
			"name": "getBone",
			"memberof": "dragonBones.FastArmature",
			"scope": "instance",
			"description": "获取指定名称的 Bone",
			"returns": "",
			"params": [
				{
					"name": "boneName",
					"type": "string",
					"description": "Bone名称"
				}
			],
			"pType": "public"
		},
		{
			"kind": "function",
			"type": "dragonBones.FastBone",
			"name": "getBoneByDisplay",
			"memberof": "dragonBones.FastArmature",
			"scope": "instance",
			"description": "获取包含指定显示对象的 Bone",
			"returns": "",
			"params": [
				{
					"name": "display",
					"type": "any",
					"description": "显示对象实例"
				}
			],
			"pType": "public"
		},
		{
			"kind": "function",
			"type": "dragonBones.FastSlot",
			"name": "getSlot",
			"memberof": "dragonBones.FastArmature",
			"scope": "instance",
			"description": "获取指定名称的 Slot",
			"returns": "",
			"params": [
				{
					"name": "slotName",
					"type": "string",
					"description": "Slot名称"
				}
			],
			"pType": "public"
		},
		{
			"kind": "function",
			"type": "dragonBones.FastSlot",
			"name": "getSlotByDisplay",
			"memberof": "dragonBones.FastArmature",
			"scope": "instance",
			"description": "获取包含指定显示对象的 Slot",
			"returns": "",
			"params": [
				{
					"name": "displayObj",
					"type": "any",
					"description": "显示对象实例"
				}
			],
			"pType": "public"
		},
		{
			"kind": "function",
			"type": "Array<dragonBones.FastSlot>",
			"name": "getSlots",
			"memberof": "dragonBones.FastArmature",
			"scope": "instance",
			"description": "获取骨架包含的所有插槽",
			"returns": "",
			"params": [
				{
					"name": "returnCopy",
					"type": "boolean",
					"default": "true",
					"description": "是否返回拷贝。默认：true"
				}
			],
			"pType": "public"
		},
		{
			"kind": "function",
			"type": "boolean",
			"name": "hasEventListener",
			"memberof": "egret.EventDispatcher",
			"scope": "instance",
			"inheritDoc": true,
			"version": "Egret 2.4",
			"platform": "Web,Native",
			"params": [
				{
					"name": "type",
					"type": "string",
					"description": "事件的类型。"
				}
			],
			"pType": "public",
			"inherited": true,
			"inherits": "egret.EventDispatcher",
			"description": "检查 EventDispatcher 对象是否为特定事件类型注册了任何侦听器。这样，您就可以确定 EventDispatcher 对象在事件流层次结构中的哪个位置改变了对事件类型的处理。要确定特定事件类型是否确实会触发事件侦听器，请使用 IEventDispatcher.willTrigger()。hasEventListener()与 willTrigger() 的区别是：hasEventListener() 只检查它所属的对象，而 willTrigger() 检查整个事件流以查找由 type 参数指定的事件。",
			"returns": "如果指定类型的侦听器已注册，则值为 true；否则，值为 false。",
			"see": [
				"#willTrigger()"
			]
		},
		{
			"kind": "function",
			"type": "void",
			"name": "invalidUpdate",
			"memberof": "dragonBones.FastArmature",
			"scope": "instance",
			"params": [
				{
					"name": "boneName",
					"type": "string",
					"default": "null",
					"description": ""
				}
			],
			"pType": "public"
		},
		{
			"kind": "function",
			"type": "void",
			"name": "once",
			"memberof": "egret.EventDispatcher",
			"scope": "instance",
			"inheritDoc": true,
			"version": "Egret 2.4",
			"platform": "Web,Native",
			"params": [
				{
					"name": "type",
					"type": "string",
					"description": "事件的类型。"
				},
				{
					"name": "listener",
					"type": "Function",
					"description": "处理事件的侦听器函数。此函数必须接受 Event 对象作为其唯一的参数，并且不能返回任何结果，如下面的示例所示： function(evt:Event):void 函数可以有任何名称。"
				},
				{
					"name": "thisObject",
					"type": "any",
					"description": "侦听函数绑定的this对象"
				},
				{
					"name": "useCapture",
					"question": true,
					"type": "boolean",
					"description": "确定侦听器是运行于捕获阶段还是运行于冒泡阶段。如果将 useCapture 设置为 true，则侦听器只在捕获阶段处理事件，而不在冒泡阶段处理事件。如果 useCapture 为 false，则侦听器只在冒泡阶段处理事件。要在两个阶段都侦听事件，请调用 once() 两次：一次将 useCapture 设置为 true，一次将 useCapture 设置为 false。"
				},
				{
					"name": "priority",
					"question": true,
					"type": "number",
					"description": "事件侦听器的优先级。优先级由一个带符号整数指定。数字越大，优先级越高。优先级为 n 的所有侦听器会在优先级为 n -1 的侦听器之前得到处理。如果两个或更多个侦听器共享相同的优先级，则按照它们的添加顺序进行处理。默认优先级为 0。"
				}
			],
			"pType": "public",
			"inherited": true,
			"inherits": "egret.EventDispatcher",
			"description": "添加仅回调一次的事件侦听器，此方法与on()方法不同，on()方法会持续产生回调，而此方法在第一次回调时就会自动移除监听。",
			"see": [
				"#on()",
				"#removeEventListener()"
			]
		},
		{
			"kind": "function",
			"type": "void",
			"name": "removeEventListener",
			"memberof": "egret.EventDispatcher",
			"scope": "instance",
			"inheritDoc": true,
			"version": "Egret 2.4",
			"platform": "Web,Native",
			"params": [
				{
					"name": "type",
					"type": "string",
					"description": "事件的类型。"
				},
				{
					"name": "listener",
					"type": "Function",
					"description": "要删除的侦听器对象"
				},
				{
					"name": "thisObject",
					"type": "any",
					"description": "侦听函数绑定的this对象"
				},
				{
					"name": "useCapture",
					"question": true,
					"type": "boolean",
					"description": "指出是为捕获阶段还是为冒泡阶段注册了侦听器。如果为捕获阶段以及冒泡阶段注册了侦听器，则需要对removeEventListener() 进行两次调用才能将这两个侦听器删除：一次调用将 useCapture 设置为 true，另一次调用将 useCapture 设置为 false。。"
				}
			],
			"pType": "public",
			"inherited": true,
			"inherits": "egret.EventDispatcher",
			"description": "从 EventDispatcher 对象中删除侦听器。如果没有向 EventDispatcher 对象注册任何匹配的侦听器，则对此方法的调用没有任何效果。"
		},
		{
			"kind": "function",
			"type": "void",
			"name": "resetAnimation",
			"memberof": "dragonBones.FastArmature",
			"scope": "instance",
			"pType": "public"
		},
		{
			"kind": "function",
			"type": "void",
			"name": "updateSlotsZOrder",
			"memberof": "dragonBones.FastArmature",
			"scope": "instance",
			"description": "按照显示层级为所有 Slot 排序",
			"pType": "public"
		},
		{
			"kind": "function",
			"type": "boolean",
			"name": "willTrigger",
			"memberof": "egret.EventDispatcher",
			"scope": "instance",
			"inheritDoc": true,
			"version": "Egret 2.4",
			"platform": "Web,Native",
			"params": [
				{
					"name": "type",
					"type": "string",
					"description": "事件类型"
				}
			],
			"pType": "public",
			"inherited": true,
			"inherits": "egret.EventDispatcher",
			"description": "检查是否用此 EventDispatcher 对象或其任何始祖为指定事件类型注册了事件侦听器。将指定类型的事件调度给此EventDispatcher 对象或其任一后代时，如果在事件流的任何阶段触发了事件侦听器，则此方法返回 true。hasEventListener() 与 willTrigger() 方法的区别是：hasEventListener() 只检查它所属的对象，而 willTrigger() 方法检查整个事件流以查找由 type 参数指定的事件。",
			"returns": "是否注册过监听器，如果注册过返回true，反之返回false",
			"see": [
				"#hasEventListener()"
			]
		}
	],
	"globalMember": [],
	"globalFunction": [],
	"class": {
		"kind": "class",
		"name": "FastArmature",
		"memberof": "dragonBones",
		"filename": "../../../Egret/egret-core/egret-core-master/src/extension/dragonbones/core/fast/FastArmature.ts",
		"description": "FastArmature 是 DragonBones 高效率的骨骼动画系统。他能缓存动画数据，大大减少动画播放的计算不支持动态添加Bone和Slot，换装请通过更换Slot的dispaly或子骨架childArmature来实现",
		"see": [
			"dragonBones.ArmatureData"
		],
		"example": "<pre><br/>\t&nbsp;&nbsp;&nbsp;&nbsp;//获取动画数据<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;skeletonData&nbsp;=&nbsp;RES.getRes(&quot;skeleton&quot;);<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//获取纹理集数据<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;textureData&nbsp;=&nbsp;RES.getRes(&quot;textureConfig&quot;);<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//获取纹理集图片<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;texture&nbsp;=&nbsp;RES.getRes(&quot;texture&quot;);<br/>\t&nbsp;&nbsp;<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//创建一个工厂，用来创建Armature<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;factory:dragonBones.EgretFactory&nbsp;=&nbsp;new&nbsp;dragonBones.EgretFactory();<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//把动画数据添加到工厂里<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;factory.addSkeletonData(dragonBones.DataParser.parseDragonBonesData(skeletonData));<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//把纹理集数据和图片添加到工厂里<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;factory.addTextureAtlas(new&nbsp;dragonBones.EgretTextureAtlas(texture,&nbsp;textureData));<br/>\t&nbsp;&nbsp;<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//获取Armature的名字，dragonBones4.0的数据可以包含多个骨架，这里取第一个Armature<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;armatureName:string&nbsp;=&nbsp;skeletonData.armature[0].name;<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//从工厂里创建出Armature<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;armature:dragonBones.FastArmature&nbsp;=&nbsp;factory.buildFastArmature(armatureName);<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//获取装载Armature的容器<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;armatureDisplay&nbsp;=&nbsp;armature.display;<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//把它添加到舞台上<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this.addChild(armatureDisplay);<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//以60fps的帧率开启动画缓存，缓存所有的动画数据<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;animationCachManager:dragonBones.AnimationCacheManager&nbsp;=&nbsp;armature.enableAnimationCache(60);<br/>\t&nbsp;&nbsp;<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//取得这个Armature动画列表中的第一个动画的名字<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;curAnimationName&nbsp;=&nbsp;armature.animation.animationList[0];<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//播放这个动画，gotoAndPlay各个参数说明<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//第一个参数&nbsp;animationName&nbsp;{string}&nbsp;指定播放动画的名称.<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//第二个参数&nbsp;fadeInTime&nbsp;{number}&nbsp;动画淡入时间&nbsp;(&gt;=&nbsp;0),&nbsp;默认值：-1&nbsp;意味着使用动画数据中的淡入时间.<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//第三个参数&nbsp;duration&nbsp;{number}&nbsp;动画播放时间。默认值：-1&nbsp;意味着使用动画数据中的播放时间.<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//第四个参数&nbsp;layTimes&nbsp;{number}&nbsp;动画播放次数(0:循环播放,&nbsp;&gt;=1:播放次数,&nbsp;NaN:使用动画数据中的播放时间),&nbsp;默认值：NaN<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;armature.animation.gotoAndPlay(curAnimationName,0.3,-1,0);<br/>\t&nbsp;&nbsp;<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//把Armature添加到心跳时钟里<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dragonBones.WorldClock.clock.add(armature);<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//心跳时钟开启<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;egret.Ticker.getInstance().register(function&nbsp;(advancedTime)&nbsp;{<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dragonBones.WorldClock.clock.advanceTime(advancedTime&nbsp;/&nbsp;1000);<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;},&nbsp;this);<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</pre>",
		"augments": [
			"dragonBones.EventDispatcher",
			"egret.EventDispatcher",
			"egret.HashObject"
		],
		"implements": [
			{
				"name": "dragonBones.ICacheableArmature"
			}
		]
	}
}