{
	"member": [],
	"function": [
		{
			"kind": "function",
			"name": "Watcher",
			"memberof": "eui.Watcher",
			"scope": "instance",
			"description": "构造函数，非公开。只能从 watch() 方法中调用此方法。有关参数用法，请参阅 watch() 方法。",
			"version": "eui 1.0",
			"platform": "Web,Native",
			"params": [
				{
					"name": "property",
					"type": "string",
					"description": ""
				},
				{
					"name": "handler",
					"type": "(value:any)=>void",
					"description": ""
				},
				{
					"name": "thisObject",
					"type": "any",
					"description": ""
				},
				{
					"name": "next",
					"question": true,
					"type": "eui.Watcher",
					"description": ""
				}
			]
		},
		{
			"kind": "function",
			"type": "any",
			"name": "getValue",
			"memberof": "eui.Watcher",
			"scope": "instance",
			"description": "检索观察的属性或属性链的当前值，当宿主对象为空时此值为空。",
			"example": "<pre><br/>watch(obj,&nbsp;[&quot;a&quot;,&quot;b&quot;,&quot;c&quot;],&nbsp;...).getValue()&nbsp;===&nbsp;obj.a.b.c<br/></pre>",
			"version": "eui 1.0",
			"platform": "Web,Native"
		},
		{
			"kind": "function",
			"type": "void",
			"name": "reset",
			"memberof": "eui.Watcher",
			"scope": "instance",
			"description": "重置此 Watcher 实例使用新的宿主对象。您可以通过该方法实现一个Watcher实例用于不同的宿主。",
			"version": "eui 1.0",
			"platform": "Web,Native",
			"params": [
				{
					"name": "newHost",
					"type": "egret.IEventDispatcher",
					"description": ""
				}
			]
		},
		{
			"kind": "function",
			"type": "void",
			"name": "setHandler",
			"memberof": "eui.Watcher",
			"scope": "instance",
			"description": "设置处理函数。",
			"version": "eui 1.0",
			"platform": "Web,Native",
			"params": [
				{
					"name": "handler",
					"type": "(value:any)=>void",
					"description": "处理函数，此参数必须为非空。"
				},
				{
					"name": "thisObject",
					"type": "any",
					"description": ""
				}
			]
		},
		{
			"kind": "function",
			"type": "void",
			"name": "unwatch",
			"memberof": "eui.Watcher",
			"scope": "instance",
			"description": "从当前宿主中断开此 Watcher 实例及其处理函数。",
			"version": "eui 1.0",
			"platform": "Web,Native"
		},
		{
			"kind": "function",
			"type": "eui.Watcher",
			"name": "watch",
			"memberof": "eui.Watcher",
			"scope": "static",
			"description": "创建并启动 Watcher 实例。注意：Watcher 只能监视 host 为 egret.IEventDispatcher 对象的属性改变。若属性链中某个属性所对应的实例不是 egret.IEventDispatcher，则属性链中在它之后的属性改变将无法检测到。",
			"returns": "如果已为 chain 参数至少指定了一个属性名称，则返回 Watcher 实例；否则返回 null。",
			"version": "eui 1.0",
			"platform": "Web,Native",
			"params": [
				{
					"name": "host",
					"type": "any",
					"description": "用于承载要监视的属性或属性链的对象。创建Watcher实例后，您可以利用<code>reset()</code>方法更改<code>host</code>参数的值。当<code>prop</code>改变的时候，会使得host对应的一系列<code>handlers</code>被触发。"
				},
				{
					"name": "chain",
					"type": "string[]",
					"description": "用于指定要监视的属性链的值。例如，要监视属性 host.a.b.c，需按以下形式调用此方法：watch¬(host, [\"a\",\"b\",\"c\"], ...)。"
				},
				{
					"name": "handler",
					"type": "(value:any)=>void",
					"description": "在监视的目标属性链中任何属性的值发生改变时调用的事件处理函数。"
				},
				{
					"name": "thisObject",
					"type": "any",
					"description": "handler 方法绑定的this对象"
				}
			]
		}
	],
	"globalMember": [],
	"globalFunction": [],
	"class": {
		"kind": "class",
		"name": "Watcher",
		"memberof": "eui",
		"filename": "extension\\eui\\binding\\Watcher.ts",
		"description": "Watcher 类能够监视可绑定属性的改变，您可以定义一个事件处理函数作为 Watcher 的回调方法，在每次可绑定属性的值改变时都执行此函数。",
		"version": "eui 1.0",
		"platform": "Web,Native",
		"example": "<pre>/**<br/>&nbsp;*&nbsp;以下示例使用&nbsp;WatcherExample&nbsp;类来说明如何监视绑定属性的改变<br/>&nbsp;*/<br/>&nbsp;class&nbsp;WatcherExample&nbsp;extends&nbsp;egret.Sprite&nbsp;{<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;porp:&nbsp;number&nbsp;=&nbsp;789;<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;constructor()&nbsp;{<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;super();<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;eui.Watcher.watch(this,&nbsp;[&quot;porp&quot;],&nbsp;this.watcherHander,&nbsp;this);<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this.porp&nbsp;=&nbsp;666;<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this.porp&nbsp;=&nbsp;123;<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;watcherHander(value:&nbsp;any):&nbsp;void&nbsp;{<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;console.log(&quot;watcherHander:&quot;,&nbsp;value,&nbsp;this.porp);<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>&nbsp;}<br/></pre>"
	}
}