{
	"member": [
		{
			"kind": "member",
			"type": "number",
			"name": "hashCode",
			"memberof": "egret.HashObject",
			"scope": "instance",
			"rwType": 1,
			"description": "返回此对象唯一的哈希值,用于唯一确定一个对象。hashCode为大于等于1的整数。",
			"version": "Egret 2.4",
			"platform": "Web,Native",
			"inherited": true,
			"inherits": "egret.HashObject"
		},
		{
			"kind": "member",
			"type": "number",
			"name": "length",
			"memberof": "eui.ArrayCollection",
			"scope": "instance",
			"rwType": 1,
			"inheritDoc": true,
			"version": "eui 1.0",
			"platform": "Web,Native",
			"description": "此集合中的项目数。0 表示不包含项目。"
		},
		{
			"kind": "member",
			"type": "any[]",
			"name": "source",
			"memberof": "eui.ArrayCollection",
			"scope": "instance",
			"description": "数据源通常情况下请不要直接调用Array的方法操作数据源，否则对应的视图无法收到数据改变的通知。通常都是通过ICollection的接口方法来查看数据。若对数据源进行了修改，请手动调用refresh()方法刷新数据。",
			"version": "eui 1.0",
			"platform": "Web,Native"
		}
	],
	"function": [
		{
			"kind": "function",
			"name": "ArrayCollection",
			"memberof": "eui.ArrayCollection",
			"scope": "instance",
			"description": "构造函数。<p/>用指定的原始数组创建一个 ArrayCollection 实例。",
			"version": "eui 1.0",
			"platform": "Web,Native",
			"params": [
				{
					"name": "source",
					"question": true,
					"type": "any[]",
					"description": ""
				}
			]
		},
		{
			"kind": "function",
			"type": "void",
			"name": "addEventListener",
			"memberof": "egret.EventDispatcher",
			"scope": "instance",
			"inheritDoc": true,
			"version": "Egret 2.4",
			"platform": "Web,Native",
			"params": [
				{
					"name": "type",
					"type": "string",
					"description": "事件的类型。"
				},
				{
					"name": "listener",
					"type": "Function",
					"description": "处理事件的侦听器函数。此函数必须接受 Event 对象作为其唯一的参数，并且不能返回任何结果，如下面的示例所示： function(evt:Event):void 函数可以有任何名称。"
				},
				{
					"name": "thisObject",
					"type": "any",
					"description": "侦听函数绑定的this对象"
				},
				{
					"name": "useCapture",
					"question": true,
					"type": "boolean",
					"description": "确定侦听器是运行于捕获阶段还是运行于冒泡阶段。如果将 useCapture 设置为 true，则侦听器只在捕获阶段处理事件，而不在冒泡阶段处理事件。如果 useCapture 为 false，则侦听器只在冒泡阶段处理事件。要在两个阶段都侦听事件，请调用 on() 两次：一次将 useCapture 设置为 true，一次将 useCapture 设置为 false。"
				},
				{
					"name": "priority",
					"question": true,
					"type": "number",
					"description": "事件侦听器的优先级。优先级由一个带符号的整数指定。数字越大，优先级越高。优先级为 n 的所有侦听器会在优先级为 n -1 的侦听器之前得到处理。如果两个或更多个侦听器共享相同的优先级，则按照它们的添加顺序进行处理。默认优先级为 0。"
				}
			],
			"inherited": true,
			"inherits": "egret.EventDispatcher",
			"description": "使用 EventDispatcher 对象注册事件侦听器对象，以使侦听器能够接收事件通知。可以为特定类型的事件、阶段和优先级在显示列表的所有节点上注册事件侦听器。成功注册一个事件侦听器后，无法通过额外调用 on() 来更改其优先级。要更改侦听器的优先级，必须先调用 removeEventListener()。然后，可以使用新的优先级再次注册该侦听器。注册该侦听器后，如果继续调用具有不同 type 或 useCapture值的 on()，则会创建单独的侦听器注册。<br/>如果不再需要某个事件侦听器，可调用 EventDispatcher.removeEventListener()删除它；否则会产生内存问题。由于垃圾回收器不会删除仍包含引用的对象，因此不会从内存中自动删除使用已注册事件侦听器的对象。复制EventDispatcher 实例时并不复制其中附加的事件侦听器。（如果新近创建的节点需要一个事件侦听器，必须在创建该节点后附加该侦听器。）但是，如果移动 EventDispatcher 实例，则其中附加的事件侦听器也会随之移动。如果在正在处理事件的节点上注册事件侦听器，则不会在当前阶段触发事件侦听器，但会在事件流的稍后阶段触发，如冒泡阶段。如果从正在处理事件的节点中删除事件侦听器，则该事件侦听器仍由当前操作触发。删除事件侦听器后，决不会再次调用该事件侦听器（除非再次注册以备将来处理）。",
			"see": [
				"#once()",
				"#removeEventListener()"
			]
		},
		{
			"kind": "function",
			"type": "void",
			"name": "addItem",
			"memberof": "eui.ArrayCollection",
			"scope": "instance",
			"description": "向列表末尾添加指定项目。等效于 <code>addItemAt(item,&nbsp;length)</code>。",
			"version": "eui 1.0",
			"platform": "Web,Native",
			"params": [
				{
					"name": "item",
					"type": "any",
					"description": "要被添加的项。"
				}
			]
		},
		{
			"kind": "function",
			"type": "void",
			"name": "addItemAt",
			"memberof": "eui.ArrayCollection",
			"scope": "instance",
			"description": "在指定的索引处添加项目。任何大于已添加项目的索引的项目索引都会增加 1。如果指定的索引比0小或者比最大长度要大。则会抛出1007异常。",
			"version": "eui 1.0",
			"platform": "Web,Native",
			"params": [
				{
					"name": "item",
					"type": "any",
					"description": "要添加的项"
				},
				{
					"name": "index",
					"type": "number",
					"description": "要添加的指定索引位置"
				}
			]
		},
		{
			"kind": "function",
			"type": "boolean",
			"name": "dispatchEvent",
			"memberof": "egret.EventDispatcher",
			"scope": "instance",
			"inheritDoc": true,
			"version": "Egret 2.4",
			"platform": "Web,Native",
			"params": [
				{
					"name": "event",
					"type": "egret.Event",
					"description": "调度到事件流中的 Event 对象。"
				}
			],
			"inherited": true,
			"inherits": "egret.EventDispatcher",
			"description": "将事件分派到事件流中。事件目标是对其调用 dispatchEvent() 方法的 EventDispatcher 对象。",
			"returns": "如果成功调度了事件，则值为 true。值 false 表示失败或对事件调用了 preventDefault()。"
		},
		{
			"kind": "function",
			"type": "boolean",
			"name": "dispatchEventWith",
			"memberof": "egret.EventDispatcher",
			"scope": "instance",
			"description": "派发一个指定参数的事件。",
			"version": "Egret 2.4",
			"platform": "Web,Native",
			"params": [
				{
					"name": "type",
					"type": "string",
					"description": "事件类型"
				},
				{
					"name": "bubbles",
					"question": true,
					"type": "boolean",
					"description": "确定 Event 对象是否参与事件流的冒泡阶段。默认值为 false。"
				},
				{
					"name": "data",
					"question": true,
					"type": "any",
					"description": "事件data"
				},
				{
					"name": "cancelable",
					"question": true,
					"type": "boolean",
					"description": "确定是否可以取消 Event 对象。默认值为 false。"
				}
			],
			"inherited": true,
			"inherits": "egret.EventDispatcher"
		},
		{
			"kind": "function",
			"type": "any",
			"name": "getItemAt",
			"memberof": "eui.ArrayCollection",
			"scope": "instance",
			"inheritDoc": true,
			"version": "eui 1.0",
			"platform": "Web,Native",
			"params": [
				{
					"name": "index",
					"type": "number",
					"description": "要得到的项的指定位置。"
				}
			],
			"description": "获取指定索引处的项目。",
			"returns": "在索引位置的项，如果没有该项则返回null。"
		},
		{
			"kind": "function",
			"type": "number",
			"name": "getItemIndex",
			"memberof": "eui.ArrayCollection",
			"scope": "instance",
			"inheritDoc": true,
			"version": "eui 1.0",
			"platform": "Web,Native",
			"params": [
				{
					"name": "item",
					"type": "any",
					"description": "要查找的项。"
				}
			],
			"description": "如果项目位于列表中,返回该项目的索引。否则返回-1。",
			"returns": "项的索引，如果该项没有在列表中将返回-1."
		},
		{
			"kind": "function",
			"type": "boolean",
			"name": "hasEventListener",
			"memberof": "egret.EventDispatcher",
			"scope": "instance",
			"inheritDoc": true,
			"version": "Egret 2.4",
			"platform": "Web,Native",
			"params": [
				{
					"name": "type",
					"type": "string",
					"description": "事件的类型。"
				}
			],
			"inherited": true,
			"inherits": "egret.EventDispatcher",
			"description": "检查 EventDispatcher 对象是否为特定事件类型注册了任何侦听器。这样，您就可以确定 EventDispatcher 对象在事件流层次结构中的哪个位置改变了对事件类型的处理。要确定特定事件类型是否确实会触发事件侦听器，请使用 IEventDispatcher.willTrigger()。hasEventListener()与 willTrigger() 的区别是：hasEventListener() 只检查它所属的对象，而 willTrigger() 检查整个事件流以查找由 type 参数指定的事件。",
			"returns": "如果指定类型的侦听器已注册，则值为 true；否则，值为 false。",
			"see": [
				"#willTrigger()"
			]
		},
		{
			"kind": "function",
			"type": "void",
			"name": "itemUpdated",
			"memberof": "eui.ArrayCollection",
			"scope": "instance",
			"description": "通知视图，某个项目的属性已更新。",
			"version": "eui 1.0",
			"platform": "Web,Native",
			"params": [
				{
					"name": "item",
					"type": "any",
					"description": "视图中需要被更新的项。"
				}
			]
		},
		{
			"kind": "function",
			"type": "void",
			"name": "once",
			"memberof": "egret.EventDispatcher",
			"scope": "instance",
			"inheritDoc": true,
			"version": "Egret 2.4",
			"platform": "Web,Native",
			"params": [
				{
					"name": "type",
					"type": "string",
					"description": "事件的类型。"
				},
				{
					"name": "listener",
					"type": "Function",
					"description": "处理事件的侦听器函数。此函数必须接受 Event 对象作为其唯一的参数，并且不能返回任何结果，如下面的示例所示： function(evt:Event):void 函数可以有任何名称。"
				},
				{
					"name": "thisObject",
					"type": "any",
					"description": "侦听函数绑定的this对象"
				},
				{
					"name": "useCapture",
					"question": true,
					"type": "boolean",
					"description": "确定侦听器是运行于捕获阶段还是运行于冒泡阶段。如果将 useCapture 设置为 true，则侦听器只在捕获阶段处理事件，而不在冒泡阶段处理事件。如果 useCapture 为 false，则侦听器只在冒泡阶段处理事件。要在两个阶段都侦听事件，请调用 once() 两次：一次将 useCapture 设置为 true，一次将 useCapture 设置为 false。"
				},
				{
					"name": "priority",
					"question": true,
					"type": "number",
					"description": "事件侦听器的优先级。优先级由一个带符号整数指定。数字越大，优先级越高。优先级为 n 的所有侦听器会在优先级为 n -1 的侦听器之前得到处理。如果两个或更多个侦听器共享相同的优先级，则按照它们的添加顺序进行处理。默认优先级为 0。"
				}
			],
			"inherited": true,
			"inherits": "egret.EventDispatcher",
			"description": "添加仅回调一次的事件侦听器，此方法与on()方法不同，on()方法会持续产生回调，而此方法在第一次回调时就会自动移除监听。",
			"see": [
				"#on()",
				"#removeEventListener()"
			]
		},
		{
			"kind": "function",
			"type": "void",
			"name": "refresh",
			"memberof": "eui.ArrayCollection",
			"scope": "instance",
			"description": "在对数据源进行排序或过滤操作后可以手动调用此方法刷新所有数据,以更新视图。ArrayCollection 不会自动检原始数据进行了改变,所以你必须调用<code>refresh()</code>方法去更新显示。",
			"version": "eui 1.0",
			"platform": "Web,Native"
		},
		{
			"kind": "function",
			"type": "void",
			"name": "removeAll",
			"memberof": "eui.ArrayCollection",
			"scope": "instance",
			"description": "删除列表中的所有项目。",
			"version": "eui 1.0",
			"platform": "Web,Native"
		},
		{
			"kind": "function",
			"type": "void",
			"name": "removeEventListener",
			"memberof": "egret.EventDispatcher",
			"scope": "instance",
			"inheritDoc": true,
			"version": "Egret 2.4",
			"platform": "Web,Native",
			"params": [
				{
					"name": "type",
					"type": "string",
					"description": "事件的类型。"
				},
				{
					"name": "listener",
					"type": "Function",
					"description": "要删除的侦听器对象"
				},
				{
					"name": "thisObject",
					"type": "any",
					"description": "侦听函数绑定的this对象"
				},
				{
					"name": "useCapture",
					"question": true,
					"type": "boolean",
					"description": "指出是为捕获阶段还是为冒泡阶段注册了侦听器。如果为捕获阶段以及冒泡阶段注册了侦听器，则需要对removeEventListener() 进行两次调用才能将这两个侦听器删除：一次调用将 useCapture 设置为 true，另一次调用将 useCapture 设置为 false。。"
				}
			],
			"inherited": true,
			"inherits": "egret.EventDispatcher",
			"description": "从 EventDispatcher 对象中删除侦听器。如果没有向 EventDispatcher 对象注册任何匹配的侦听器，则对此方法的调用没有任何效果。"
		},
		{
			"kind": "function",
			"type": "any",
			"name": "removeItemAt",
			"memberof": "eui.ArrayCollection",
			"scope": "instance",
			"description": "删除指定索引处的项目并返回该项目。原先位于此索引之后的所有项目的索引现在都向前移动一个位置。",
			"returns": "被移除的项。",
			"version": "eui 1.0",
			"platform": "Web,Native",
			"params": [
				{
					"name": "index",
					"type": "number",
					"description": "要被移除的项的索引。"
				}
			]
		},
		{
			"kind": "function",
			"type": "void",
			"name": "replaceAll",
			"memberof": "eui.ArrayCollection",
			"scope": "instance",
			"description": "用新数据源替换原始数据源，此方法与直接设置source不同，它不会导致目标视图重置滚动位置。",
			"version": "eui 1.0",
			"platform": "Web,Native",
			"params": [
				{
					"name": "newSource",
					"type": "any[]",
					"description": "新数据。"
				}
			]
		},
		{
			"kind": "function",
			"type": "any",
			"name": "replaceItemAt",
			"memberof": "eui.ArrayCollection",
			"scope": "instance",
			"description": "替换在指定索引处的项目，并返回该项目。",
			"returns": "被替换的项目，如果没有该项则返回<code>null</code> 。",
			"version": "eui 1.0",
			"platform": "Web,Native",
			"params": [
				{
					"name": "item",
					"type": "any",
					"description": "要在指定索引放置的新的项。"
				},
				{
					"name": "index",
					"type": "number",
					"description": "要被替换的项的索引位置。"
				}
			]
		},
		{
			"kind": "function",
			"type": "boolean",
			"name": "willTrigger",
			"memberof": "egret.EventDispatcher",
			"scope": "instance",
			"inheritDoc": true,
			"version": "Egret 2.4",
			"platform": "Web,Native",
			"params": [
				{
					"name": "type",
					"type": "string",
					"description": "事件类型"
				}
			],
			"inherited": true,
			"inherits": "egret.EventDispatcher",
			"description": "检查是否用此 EventDispatcher 对象或其任何始祖为指定事件类型注册了事件侦听器。将指定类型的事件调度给此EventDispatcher 对象或其任一后代时，如果在事件流的任何阶段触发了事件侦听器，则此方法返回 true。hasEventListener() 与 willTrigger() 方法的区别是：hasEventListener() 只检查它所属的对象，而 willTrigger() 方法检查整个事件流以查找由 type 参数指定的事件。",
			"returns": "是否注册过监听器，如果注册过返回true，反之返回false",
			"see": [
				"#hasEventListener()"
			]
		}
	],
	"globalMember": [],
	"globalFunction": [],
	"class": {
		"kind": "class",
		"name": "ArrayCollection",
		"memberof": "eui",
		"filename": "extension\\eui\\collections\\ArrayCollection.ts",
		"description": "ArrayCollection 类是数组的集合类数据结构包装器，可使用<code>ICollection</code>接口的方法和属性对其进行访问和处理。使用这种数据结构包装普通数组，能在数据源发生改变的时候主动通知视图刷新变更数据项。",
		"event": [
			{
				"name": "eui.CollectionEvent.COLLECTION_CHANGE",
				"description": "当 ArrayCollection 更新的的时候会派发此事件。"
			}
		],
		"defaultProperty": {
			"name": "source"
		},
		"version": "eui 1.0",
		"platform": "Web,Native",
		"example": "<pre>/**<br/>&nbsp;*&nbsp;以下示例使用&nbsp;ArrayCollectionExample&nbsp;类来说明如何使用数组的集合类数据结构包装器<br/>&nbsp;*/<br/>class&nbsp;ArrayCollectionExample&nbsp;extends&nbsp;egret.Sprite&nbsp;{<br/>&nbsp;&nbsp;&nbsp;&nbsp;constructor()&nbsp;{<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;super();<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;arr&nbsp;=&nbsp;[2,&nbsp;1,&nbsp;3];<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;arrayCollection&nbsp;=&nbsp;new&nbsp;eui.ArrayCollection();<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;arrayCollection.source&nbsp;=&nbsp;arr;<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;arrayCollection.addEventListener(eui.CollectionEvent.COLLECTION_CHANGE,&nbsp;this.onCollectionChange,&nbsp;this);<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;arrayCollection.addItem(5);//add<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;arrayCollection.addItemAt(6,&nbsp;1);//add<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;arrayCollection.source.sort();<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;arrayCollection.refresh();//refersh<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;arrayCollection.removeItemAt(2);//remove<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;arrayCollection.removeAll();//remove<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;arrayCollection.source&nbsp;=&nbsp;[1,&nbsp;2,&nbsp;3];//reset<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;arrayCollection.replaceItemAt(7,&nbsp;1);//replace<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;arrayCollection.source[1]&nbsp;=&nbsp;8;<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;arrayCollection.itemUpdated(1);//update<br/>&nbsp;&nbsp;&nbsp;&nbsp;}<br/>&nbsp;&nbsp;&nbsp;&nbsp;private&nbsp;onCollectionChange(e:&nbsp;eui.CollectionEvent)&nbsp;{<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;switch&nbsp;(e.kind)&nbsp;{<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;case&nbsp;eui.CollectionEventKind.ADD:<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;console.log(&quot;arrayCollection&nbsp;add&quot;,&nbsp;e.currentTarget.source,&nbsp;e.location);<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break;<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;case&nbsp;eui.CollectionEventKind.REFRESH:<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;console.log(&quot;arrayCollection&nbsp;refersh&quot;,&nbsp;e.currentTarget.source,&nbsp;e.location);<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break;<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;case&nbsp;eui.CollectionEventKind.REMOVE:<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;console.log(&quot;arrayCollection&nbsp;remove&quot;,&nbsp;e.currentTarget.source,&nbsp;e.location);<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break;<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;case&nbsp;eui.CollectionEventKind.REPLACE:<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;console.log(&quot;arrayCollection&nbsp;replace&quot;,&nbsp;e.currentTarget.source,&nbsp;e.location);<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break;<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;case&nbsp;eui.CollectionEventKind.RESET:<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;console.log(&quot;arrayCollection&nbsp;reset&quot;,&nbsp;e.currentTarget.source,&nbsp;e.location);<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break;<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;case&nbsp;eui.CollectionEventKind.UPDATE:<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;console.log(&quot;arrayCollection&nbsp;update&quot;,&nbsp;e.currentTarget.source,&nbsp;e.location);<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break;<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br/>&nbsp;&nbsp;&nbsp;&nbsp;}<br/>}<br/></pre>",
		"augments": [
			"egret.EventDispatcher",
			"egret.HashObject"
		],
		"implements": [
			{
				"name": "eui.ICollection"
			}
		]
	}
}