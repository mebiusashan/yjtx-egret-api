{
	"member": [
		{
			"kind": "member",
			"type": "number",
			"name": "gap",
			"memberof": "eui.LinearLayoutBase",
			"scope": "instance",
			"description": "布局元素之间的间隔（以像素为单位）。",
			"default": "6",
			"version": "eui 1.0",
			"platform": "Web,Native",
			"inherited": true,
			"inherits": "eui.LinearLayoutBase"
		},
		{
			"kind": "member",
			"type": "number",
			"name": "hashCode",
			"memberof": "egret.HashObject",
			"scope": "instance",
			"rwType": 1,
			"description": "返回此对象唯一的哈希值,用于唯一确定一个对象。hashCode为大于等于1的整数。",
			"version": "Egret 2.4",
			"platform": "Web,Native",
			"inherited": true,
			"inherits": "egret.HashObject"
		},
		{
			"kind": "member",
			"type": "string",
			"name": "horizontalAlign",
			"memberof": "eui.LinearLayoutBase",
			"scope": "instance",
			"description": "布局元素的水平对齐策略。<p><code>egret.HorizontalAlign</code> 和<code>eui.JustifyAlign</code>类定义此属性的可能值。<p>",
			"default": "\"left\"",
			"version": "eui 1.0",
			"platform": "Web,Native",
			"inherited": true,
			"inherits": "eui.LinearLayoutBase"
		},
		{
			"kind": "member",
			"type": "number",
			"name": "paddingBottom",
			"memberof": "eui.LinearLayoutBase",
			"scope": "instance",
			"description": "容器的底边缘与所有容器的布局元素的底边缘之间的最少像素数。",
			"default": "0",
			"version": "eui 1.0",
			"platform": "Web,Native",
			"inherited": true,
			"inherits": "eui.LinearLayoutBase"
		},
		{
			"kind": "member",
			"type": "number",
			"name": "paddingLeft",
			"memberof": "eui.LinearLayoutBase",
			"scope": "instance",
			"description": "容器的左边缘与第一个布局元素的左边缘之间的像素数。",
			"default": "0",
			"version": "eui 1.0",
			"platform": "Web,Native",
			"inherited": true,
			"inherits": "eui.LinearLayoutBase"
		},
		{
			"kind": "member",
			"type": "number",
			"name": "paddingRight",
			"memberof": "eui.LinearLayoutBase",
			"scope": "instance",
			"description": "容器的右边缘与最后一个布局元素的右边缘之间的像素数。",
			"default": "0",
			"version": "eui 1.0",
			"platform": "Web,Native",
			"inherited": true,
			"inherits": "eui.LinearLayoutBase"
		},
		{
			"kind": "member",
			"type": "number",
			"name": "paddingTop",
			"memberof": "eui.LinearLayoutBase",
			"scope": "instance",
			"description": "容器的顶边缘与所有容器的布局元素的顶边缘之间的最少像素数。",
			"default": "0",
			"version": "eui 1.0",
			"platform": "Web,Native",
			"inherited": true,
			"inherits": "eui.LinearLayoutBase"
		},
		{
			"kind": "member",
			"type": "eui.Group",
			"name": "target",
			"memberof": "eui.LayoutBase",
			"scope": "instance",
			"description": "此布局将测量其元素、调整其元素的大小并定位其元素的 Group 容器。",
			"version": "eui 1.0",
			"platform": "Web,Native",
			"inherited": true,
			"inherits": "eui.LayoutBase"
		},
		{
			"kind": "member",
			"type": "boolean",
			"name": "useVirtualLayout",
			"memberof": "eui.LayoutBase",
			"scope": "instance",
			"description": "若要配置容器使用虚拟布局，请为与容器关联的布局的 <code>useVirtualLayout</code> 属性设置为 <code>true</code>。只有布局设置为 VerticalLayout、HorizontalLayout 或 TileLayout 的 DataGroup 才支持虚拟布局。不支持虚拟化的布局子类必须禁止更改此属性。",
			"default": "false",
			"version": "eui 1.0",
			"platform": "Web,Native",
			"inherited": true,
			"inherits": "eui.LayoutBase"
		},
		{
			"kind": "member",
			"type": "string",
			"name": "verticalAlign",
			"memberof": "eui.LinearLayoutBase",
			"scope": "instance",
			"description": "布局元素的垂直对齐策略。请使用 VerticalAlign 定义的常量。<p><code>egret.VerticalAlign</code> 和<code>eui.JustifyAlign</code>类定义此属性的可能值。<p>",
			"default": "\"top\"",
			"version": "eui 1.0",
			"platform": "Web,Native",
			"inherited": true,
			"inherits": "eui.LinearLayoutBase"
		}
	],
	"function": [
		{
			"kind": "function",
			"type": "void",
			"name": "addEventListener",
			"memberof": "egret.EventDispatcher",
			"scope": "instance",
			"inheritDoc": true,
			"version": "Egret 2.4",
			"platform": "Web,Native",
			"params": [
				{
					"name": "type",
					"type": "string",
					"description": "事件的类型。"
				},
				{
					"name": "listener",
					"type": "Function",
					"description": "处理事件的侦听器函数。此函数必须接受 Event 对象作为其唯一的参数，并且不能返回任何结果，如下面的示例所示： function(evt:Event):void 函数可以有任何名称。"
				},
				{
					"name": "thisObject",
					"type": "any",
					"description": "侦听函数绑定的this对象"
				},
				{
					"name": "useCapture",
					"question": true,
					"type": "boolean",
					"description": "确定侦听器是运行于捕获阶段还是运行于冒泡阶段。如果将 useCapture 设置为 true，则侦听器只在捕获阶段处理事件，而不在冒泡阶段处理事件。如果 useCapture 为 false，则侦听器只在冒泡阶段处理事件。要在两个阶段都侦听事件，请调用 on() 两次：一次将 useCapture 设置为 true，一次将 useCapture 设置为 false。"
				},
				{
					"name": "priority",
					"question": true,
					"type": "number",
					"description": "事件侦听器的优先级。优先级由一个带符号的整数指定。数字越大，优先级越高。优先级为 n 的所有侦听器会在优先级为 n -1 的侦听器之前得到处理。如果两个或更多个侦听器共享相同的优先级，则按照它们的添加顺序进行处理。默认优先级为 0。"
				}
			],
			"inherited": true,
			"inherits": "egret.EventDispatcher",
			"description": "使用 EventDispatcher 对象注册事件侦听器对象，以使侦听器能够接收事件通知。可以为特定类型的事件、阶段和优先级在显示列表的所有节点上注册事件侦听器。成功注册一个事件侦听器后，无法通过额外调用 on() 来更改其优先级。要更改侦听器的优先级，必须先调用 removeEventListener()。然后，可以使用新的优先级再次注册该侦听器。注册该侦听器后，如果继续调用具有不同 type 或 useCapture值的 on()，则会创建单独的侦听器注册。<br/>如果不再需要某个事件侦听器，可调用 EventDispatcher.removeEventListener()删除它；否则会产生内存问题。由于垃圾回收器不会删除仍包含引用的对象，因此不会从内存中自动删除使用已注册事件侦听器的对象。复制EventDispatcher 实例时并不复制其中附加的事件侦听器。（如果新近创建的节点需要一个事件侦听器，必须在创建该节点后附加该侦听器。）但是，如果移动 EventDispatcher 实例，则其中附加的事件侦听器也会随之移动。如果在正在处理事件的节点上注册事件侦听器，则不会在当前阶段触发事件侦听器，但会在事件流的稍后阶段触发，如冒泡阶段。如果从正在处理事件的节点中删除事件侦听器，则该事件侦听器仍由当前操作触发。删除事件侦听器后，决不会再次调用该事件侦听器（除非再次注册以备将来处理）。",
			"see": [
				"#once()",
				"#removeEventListener()"
			]
		},
		{
			"kind": "function",
			"type": "void",
			"name": "clearVirtualLayoutCache",
			"memberof": "eui.LinearLayoutBase",
			"scope": "instance",
			"inheritDoc": true,
			"version": "eui 1.0",
			"platform": "Web,Native",
			"inherited": true,
			"inherits": "eui.LinearLayoutBase",
			"description": "如果 <code>useVirtualLayout</code> 为 <code>true</code>，则当布局目标改变时，布局目标可以使用此方法来清除已缓存布局信息。"
		},
		{
			"kind": "function",
			"type": "boolean",
			"name": "dispatchEvent",
			"memberof": "egret.EventDispatcher",
			"scope": "instance",
			"inheritDoc": true,
			"version": "Egret 2.4",
			"platform": "Web,Native",
			"params": [
				{
					"name": "event",
					"type": "egret.Event",
					"description": "调度到事件流中的 Event 对象。"
				}
			],
			"inherited": true,
			"inherits": "egret.EventDispatcher",
			"description": "将事件分派到事件流中。事件目标是对其调用 dispatchEvent() 方法的 EventDispatcher 对象。",
			"returns": "如果成功调度了事件，则值为 true。值 false 表示失败或对事件调用了 preventDefault()。"
		},
		{
			"kind": "function",
			"type": "boolean",
			"name": "dispatchEventWith",
			"memberof": "egret.EventDispatcher",
			"scope": "instance",
			"description": "派发一个指定参数的事件。",
			"version": "Egret 2.4",
			"platform": "Web,Native",
			"params": [
				{
					"name": "type",
					"type": "string",
					"description": "事件类型"
				},
				{
					"name": "bubbles",
					"question": true,
					"type": "boolean",
					"description": "确定 Event 对象是否参与事件流的冒泡阶段。默认值为 false。"
				},
				{
					"name": "data",
					"question": true,
					"type": "any",
					"description": "事件data"
				}
			],
			"inherited": true,
			"inherits": "egret.EventDispatcher"
		},
		{
			"kind": "function",
			"type": "void",
			"name": "elementAdded",
			"memberof": "eui.VerticalLayout",
			"scope": "instance",
			"inheritDoc": true,
			"version": "eui 1.0",
			"platform": "Web,Native",
			"params": [
				{
					"name": "index",
					"type": "number",
					"description": "发生改变的子项索引"
				}
			],
			"description": "在已添加布局元素之后且在验证目标的大小和显示列表之前，由目标调用。按元素状态缓存的布局（比如虚拟布局）可以覆盖此方法以更新其缓存。"
		},
		{
			"kind": "function",
			"type": "void",
			"name": "elementRemoved",
			"memberof": "eui.LinearLayoutBase",
			"scope": "instance",
			"inheritDoc": true,
			"version": "eui 1.0",
			"platform": "Web,Native",
			"params": [
				{
					"name": "index",
					"type": "number",
					"description": "发生改变的子项索引"
				}
			],
			"inherited": true,
			"inherits": "eui.LinearLayoutBase",
			"description": "必须在已删除布局元素之后且在验证目标的大小和显示列表之前，由目标调用此方法。按元素状态缓存的布局（比如虚拟布局）可以覆盖此方法以更新其缓存。"
		},
		{
			"kind": "function",
			"type": "number[]",
			"name": "getElementIndicesInView",
			"memberof": "eui.LayoutBase",
			"scope": "instance",
			"description": "返回此 Group 中可见的元素的索引。",
			"returns": "可见的元素的索引。",
			"version": "eui 1.0",
			"platform": "Web,Native",
			"inherited": true,
			"inherits": "eui.LayoutBase"
		},
		{
			"kind": "function",
			"type": "boolean",
			"name": "hasEventListener",
			"memberof": "egret.EventDispatcher",
			"scope": "instance",
			"inheritDoc": true,
			"version": "Egret 2.4",
			"platform": "Web,Native",
			"params": [
				{
					"name": "type",
					"type": "string",
					"description": "事件的类型。"
				}
			],
			"inherited": true,
			"inherits": "egret.EventDispatcher",
			"description": "检查 EventDispatcher 对象是否为特定事件类型注册了任何侦听器。这样，您就可以确定 EventDispatcher 对象在事件流层次结构中的哪个位置改变了对事件类型的处理。要确定特定事件类型是否确实会触发事件侦听器，请使用 IEventDispatcher.willTrigger()。hasEventListener()与 willTrigger() 的区别是：hasEventListener() 只检查它所属的对象，而 willTrigger() 检查整个事件流以查找由 type 参数指定的事件。",
			"returns": "如果指定类型的侦听器已注册，则值为 true；否则，值为 false。",
			"see": [
				"#willTrigger()"
			]
		},
		{
			"kind": "function",
			"type": "void",
			"name": "measure",
			"memberof": "eui.LinearLayoutBase",
			"scope": "instance",
			"inheritDoc": true,
			"version": "eui 1.0",
			"platform": "Web,Native",
			"inherited": true,
			"inherits": "eui.LinearLayoutBase",
			"description": "基于目标的内容测量其默认大小"
		},
		{
			"kind": "function",
			"type": "void",
			"name": "once",
			"memberof": "egret.EventDispatcher",
			"scope": "instance",
			"inheritDoc": true,
			"version": "Egret 2.4",
			"platform": "Web,Native",
			"params": [
				{
					"name": "type",
					"type": "string",
					"description": "事件的类型。"
				},
				{
					"name": "listener",
					"type": "Function",
					"description": "处理事件的侦听器函数。此函数必须接受 Event 对象作为其唯一的参数，并且不能返回任何结果，如下面的示例所示： function(evt:Event):void 函数可以有任何名称。"
				},
				{
					"name": "thisObject",
					"type": "any",
					"description": "侦听函数绑定的this对象"
				},
				{
					"name": "useCapture",
					"question": true,
					"type": "boolean",
					"description": "确定侦听器是运行于捕获阶段还是运行于冒泡阶段。如果将 useCapture 设置为 true，则侦听器只在捕获阶段处理事件，而不在冒泡阶段处理事件。如果 useCapture 为 false，则侦听器只在冒泡阶段处理事件。要在两个阶段都侦听事件，请调用 once() 两次：一次将 useCapture 设置为 true，一次将 useCapture 设置为 false。"
				},
				{
					"name": "priority",
					"question": true,
					"type": "number",
					"description": "事件侦听器的优先级。优先级由一个带符号整数指定。数字越大，优先级越高。优先级为 n 的所有侦听器会在优先级为 n -1 的侦听器之前得到处理。如果两个或更多个侦听器共享相同的优先级，则按照它们的添加顺序进行处理。默认优先级为 0。"
				}
			],
			"inherited": true,
			"inherits": "egret.EventDispatcher",
			"description": "添加仅回调一次的事件侦听器，此方法与on()方法不同，on()方法会持续产生回调，而此方法在第一次回调时就会自动移除监听。",
			"see": [
				"#on()",
				"#removeEventListener()"
			]
		},
		{
			"kind": "function",
			"type": "void",
			"name": "removeEventListener",
			"memberof": "egret.EventDispatcher",
			"scope": "instance",
			"inheritDoc": true,
			"version": "Egret 2.4",
			"platform": "Web,Native",
			"params": [
				{
					"name": "type",
					"type": "string",
					"description": "事件的类型。"
				},
				{
					"name": "listener",
					"type": "Function",
					"description": "要删除的侦听器对象"
				},
				{
					"name": "thisObject",
					"type": "any",
					"description": "侦听函数绑定的this对象"
				},
				{
					"name": "useCapture",
					"question": true,
					"type": "boolean",
					"description": "指出是为捕获阶段还是为冒泡阶段注册了侦听器。如果为捕获阶段以及冒泡阶段注册了侦听器，则需要对removeEventListener() 进行两次调用才能将这两个侦听器删除：一次调用将 useCapture 设置为 true，另一次调用将 useCapture 设置为 false。。"
				}
			],
			"inherited": true,
			"inherits": "egret.EventDispatcher",
			"description": "从 EventDispatcher 对象中删除侦听器。如果没有向 EventDispatcher 对象注册任何匹配的侦听器，则对此方法的调用没有任何效果。"
		},
		{
			"kind": "function",
			"type": "void",
			"name": "scrollPositionChanged",
			"memberof": "eui.LinearLayoutBase",
			"scope": "instance",
			"inheritDoc": true,
			"version": "eui 1.0",
			"platform": "Web,Native",
			"inherited": true,
			"inherits": "eui.LinearLayoutBase",
			"description": "<code>verticalScrollPosition</code> 或 <code>horizontalScrollPosition</code>属性更改时调用。"
		},
		{
			"kind": "function",
			"type": "void",
			"name": "setTypicalSize",
			"memberof": "eui.LayoutBase",
			"scope": "instance",
			"description": "设置一个典型元素的大小",
			"version": "eui 1.0",
			"platform": "Web,Native",
			"params": [
				{
					"name": "width",
					"type": "number",
					"description": "元素的宽"
				},
				{
					"name": "height",
					"type": "number",
					"description": "元素的高"
				}
			],
			"inherited": true,
			"inherits": "eui.LayoutBase"
		},
		{
			"kind": "function",
			"type": "void",
			"name": "updateDisplayList",
			"memberof": "eui.LinearLayoutBase",
			"scope": "instance",
			"inheritDoc": true,
			"version": "eui 1.0",
			"platform": "Web,Native",
			"params": [
				{
					"name": "width",
					"type": "number",
					"description": ""
				},
				{
					"name": "height",
					"type": "number",
					"description": ""
				}
			],
			"inherited": true,
			"inherits": "eui.LinearLayoutBase",
			"description": "调整目标的元素的大小并定位这些元素。"
		},
		{
			"kind": "function",
			"type": "boolean",
			"name": "willTrigger",
			"memberof": "egret.EventDispatcher",
			"scope": "instance",
			"inheritDoc": true,
			"version": "Egret 2.4",
			"platform": "Web,Native",
			"params": [
				{
					"name": "type",
					"type": "string",
					"description": "事件类型"
				}
			],
			"inherited": true,
			"inherits": "egret.EventDispatcher",
			"description": "检查是否用此 EventDispatcher 对象或其任何始祖为指定事件类型注册了事件侦听器。将指定类型的事件调度给此EventDispatcher 对象或其任一后代时，如果在事件流的任何阶段触发了事件侦听器，则此方法返回 true。hasEventListener() 与 willTrigger() 方法的区别是：hasEventListener() 只检查它所属的对象，而 willTrigger() 方法检查整个事件流以查找由 type 参数指定的事件。",
			"returns": "是否注册过监听器，如果注册过返回true，反之返回false",
			"see": [
				"#hasEventListener()"
			]
		}
	],
	"globalMember": [],
	"globalFunction": [],
	"class": {
		"kind": "class",
		"name": "VerticalLayout",
		"memberof": "eui",
		"filename": "extension/eui/layouts/VerticalLayout.ts",
		"description": "VerticalLayout 类按垂直顺序从上向下排列布局元素，在元素和围绕元素顺序的可选填充之间带有可选间隙。",
		"version": "eui 1.0",
		"platform": "Web,Native",
		"example": "<pre>/**<br/>&nbsp;*&nbsp;以下示例使用&nbsp;VerticalLayoutExample&nbsp;类来演示垂直顺序从上向下排列布局元素<br/>&nbsp;*/<br/>class&nbsp;VerticalLayoutExample&nbsp;extends&nbsp;egret.Sprite&nbsp;{<br/>&nbsp;&nbsp;&nbsp;&nbsp;constructor()&nbsp;{<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;super();<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this.once(egret.Event.ADDED_TO_STAGE,&nbsp;this.init,&nbsp;this);<br/>&nbsp;&nbsp;&nbsp;&nbsp;}<br/>&nbsp;&nbsp;&nbsp;&nbsp;private&nbsp;init():&nbsp;void&nbsp;{<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;group&nbsp;=&nbsp;new&nbsp;eui.Group();<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;group.x&nbsp;=&nbsp;20;<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;group.y&nbsp;=&nbsp;20;<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this.addChild(group);<br/><br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;layout&nbsp;=&nbsp;new&nbsp;eui.VerticalLayout();<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;layout.gap&nbsp;=&nbsp;30;<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;group.layout&nbsp;=&nbsp;layout;<br/><br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;btn1&nbsp;=&nbsp;this.getButton();<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;group.addChild(btn1);<br/><br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;btn2&nbsp;=&nbsp;this.getButton();<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;group.addChild(btn2);<br/><br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;btn3&nbsp;=&nbsp;this.getButton();<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;group.addChild(btn3);<br/>&nbsp;&nbsp;&nbsp;&nbsp;}<br/>&nbsp;&nbsp;&nbsp;&nbsp;private&nbsp;getButton():&nbsp;eui.Button&nbsp;{<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;exml&nbsp;=<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;`&lt;e:Skin&nbsp;class=&quot;skins.ButtonSkin&quot;&nbsp;states=&quot;up,down,disabled&quot;&nbsp;minHeight=&quot;50&quot;&nbsp;minWidth=&quot;100&quot;&nbsp;xmlns:e=&quot;http://ns.egret.com/eui&quot;&gt;<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;e:Image&nbsp;source=&quot;resource/button_up.png&quot;&nbsp;source.down=&quot;resource/button_down.png&quot;&nbsp;scale9Grid=&quot;1,3,8,8&quot;&nbsp;width=&quot;100%&quot;&nbsp;height=&quot;100%&quot;/&gt;<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;e:Label&nbsp;id=&quot;labelDisplay&quot;&nbsp;top=&quot;8&quot;&nbsp;bottom=&quot;8&quot;&nbsp;left=&quot;8&quot;&nbsp;right=&quot;8&quot;&nbsp;size=&quot;20&quot;&nbsp;fontFamily=&quot;Tahoma&quot;&nbsp;textColor=&quot;0xFFFFFF&quot;&nbsp;verticalAlign=&quot;middle&quot;&nbsp;textAlign=&quot;center&quot;/&gt;<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/e:Skin&gt;`;<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;clazz&nbsp;=&nbsp;EXML.parse(exml);<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;btn&nbsp;=&nbsp;new&nbsp;eui.Button();<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;btn.skinName&nbsp;=&nbsp;&quot;skins.ButtonSkin&quot;;<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;btn;<br/>&nbsp;&nbsp;&nbsp;&nbsp;}<br/>}<br/></pre>",
		"augments": [
			"eui.LinearLayoutBase",
			"eui.LayoutBase",
			"egret.EventDispatcher",
			"egret.HashObject"
		]
	}
}