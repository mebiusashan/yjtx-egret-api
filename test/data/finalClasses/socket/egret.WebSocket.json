{
	"member": [
		{
			"kind": "member",
			"type": "string",
			"name": "TYPE_BINARY",
			"memberof": "egret.WebSocket",
			"scope": "static",
			"description": "以二进制格式发送和接收数据",
			"version": "Egret 2.4",
			"platform": "Web,Native",
			"default": "\"webSocketTypeBinary\""
		},
		{
			"kind": "member",
			"type": "string",
			"name": "TYPE_STRING",
			"memberof": "egret.WebSocket",
			"scope": "static",
			"description": "以字符串格式发送和接收数据",
			"version": "Egret 2.4",
			"platform": "Web,Native",
			"default": "\"webSocketTypeString\""
		},
		{
			"kind": "member",
			"type": "boolean",
			"name": "connected",
			"memberof": "egret.WebSocket",
			"scope": "instance",
			"rwType": 1,
			"description": "表示此 Socket 对象目前是否已连接",
			"version": "Egret 2.4",
			"platform": "Web,Native"
		},
		{
			"kind": "member",
			"type": "number",
			"name": "hashCode",
			"memberof": "egret.HashObject",
			"scope": "instance",
			"rwType": 1,
			"description": "返回此对象唯一的哈希值,用于唯一确定一个对象。hashCode为大于等于1的整数。",
			"version": "Egret 2.4",
			"platform": "Web,Native",
			"inherited": true,
			"inherits": "egret.HashObject"
		},
		{
			"kind": "member",
			"type": "string",
			"name": "type",
			"memberof": "egret.WebSocket",
			"scope": "instance",
			"description": "发送和接收数据的格式，默认是字符串格式",
			"version": "Egret 2.4",
			"platform": "Web,Native"
		}
	],
	"function": [
		{
			"kind": "function",
			"name": "WebSocket",
			"memberof": "egret.WebSocket",
			"scope": "instance",
			"description": "创建一个 egret.WebSocket 对象参数为预留参数，现版本暂不处理，连接地址和端口号在 connect 函数中传入",
			"version": "Egret 2.4",
			"platform": "Web,Native",
			"params": [
				{
					"name": "host",
					"type": "string",
					"default": "\"\"",
					"description": ""
				},
				{
					"name": "port",
					"type": "number",
					"default": "0",
					"description": ""
				}
			]
		},
		{
			"kind": "function",
			"type": "void",
			"name": "addEventListener",
			"memberof": "egret.EventDispatcher",
			"scope": "instance",
			"inheritDoc": true,
			"version": "Egret 2.4",
			"platform": "Web,Native",
			"params": [
				{
					"name": "type",
					"type": "string",
					"description": "事件的类型。"
				},
				{
					"name": "listener",
					"type": "Function",
					"description": "处理事件的侦听器函数。此函数必须接受 Event 对象作为其唯一的参数，并且不能返回任何结果，如下面的示例所示： function(evt:Event):void 函数可以有任何名称。"
				},
				{
					"name": "thisObject",
					"type": "any",
					"description": "侦听函数绑定的this对象"
				},
				{
					"name": "useCapture",
					"question": true,
					"type": "boolean",
					"description": "确定侦听器是运行于捕获阶段还是运行于冒泡阶段。如果将 useCapture 设置为 true，则侦听器只在捕获阶段处理事件，而不在冒泡阶段处理事件。如果 useCapture 为 false，则侦听器只在冒泡阶段处理事件。要在两个阶段都侦听事件，请调用 on() 两次：一次将 useCapture 设置为 true，一次将 useCapture 设置为 false。"
				},
				{
					"name": "priority",
					"question": true,
					"type": "number",
					"description": "事件侦听器的优先级。优先级由一个带符号的整数指定。数字越大，优先级越高。优先级为 n 的所有侦听器会在优先级为 n -1 的侦听器之前得到处理。如果两个或更多个侦听器共享相同的优先级，则按照它们的添加顺序进行处理。默认优先级为 0。"
				}
			],
			"inherited": true,
			"inherits": "egret.EventDispatcher",
			"description": "使用 EventDispatcher 对象注册事件侦听器对象，以使侦听器能够接收事件通知。可以为特定类型的事件、阶段和优先级在显示列表的所有节点上注册事件侦听器。成功注册一个事件侦听器后，无法通过额外调用 on() 来更改其优先级。要更改侦听器的优先级，必须先调用 removeEventListener()。然后，可以使用新的优先级再次注册该侦听器。注册该侦听器后，如果继续调用具有不同 type 或 useCapture值的 on()，则会创建单独的侦听器注册。<br/>如果不再需要某个事件侦听器，可调用 EventDispatcher.removeEventListener()删除它；否则会产生内存问题。由于垃圾回收器不会删除仍包含引用的对象，因此不会从内存中自动删除使用已注册事件侦听器的对象。复制EventDispatcher 实例时并不复制其中附加的事件侦听器。（如果新近创建的节点需要一个事件侦听器，必须在创建该节点后附加该侦听器。）但是，如果移动 EventDispatcher 实例，则其中附加的事件侦听器也会随之移动。如果在正在处理事件的节点上注册事件侦听器，则不会在当前阶段触发事件侦听器，但会在事件流的稍后阶段触发，如冒泡阶段。如果从正在处理事件的节点中删除事件侦听器，则该事件侦听器仍由当前操作触发。删除事件侦听器后，决不会再次调用该事件侦听器（除非再次注册以备将来处理）。",
			"see": [
				"#once()",
				"#removeEventListener()"
			]
		},
		{
			"kind": "function",
			"type": "void",
			"name": "close",
			"memberof": "egret.WebSocket",
			"scope": "instance",
			"description": "关闭套接字",
			"version": "Egret 2.4",
			"platform": "Web,Native"
		},
		{
			"kind": "function",
			"type": "void",
			"name": "connect",
			"memberof": "egret.WebSocket",
			"scope": "instance",
			"description": "将套接字连接到指定的主机和端口",
			"version": "Egret 2.4",
			"platform": "Web,Native",
			"params": [
				{
					"name": "host",
					"type": "string",
					"description": "要连接到的主机的名称或 IP 地址"
				},
				{
					"name": "port",
					"type": "number",
					"description": "要连接到的端口号"
				}
			]
		},
		{
			"kind": "function",
			"type": "void",
			"name": "connectByUrl",
			"memberof": "egret.WebSocket",
			"scope": "instance",
			"description": "根据提供的url连接",
			"params": [
				{
					"name": "url",
					"type": "string",
					"description": "全地址。如ws://echo.websocket.org:80"
				}
			]
		},
		{
			"kind": "function",
			"type": "boolean",
			"name": "dispatchEvent",
			"memberof": "egret.EventDispatcher",
			"scope": "instance",
			"inheritDoc": true,
			"version": "Egret 2.4",
			"platform": "Web,Native",
			"params": [
				{
					"name": "event",
					"type": "egret.Event",
					"description": "调度到事件流中的 Event 对象。"
				}
			],
			"inherited": true,
			"inherits": "egret.EventDispatcher",
			"description": "将事件分派到事件流中。事件目标是对其调用 dispatchEvent() 方法的 EventDispatcher 对象。",
			"returns": "如果成功调度了事件，则值为 true。值 false 表示失败或对事件调用了 preventDefault()。"
		},
		{
			"kind": "function",
			"type": "boolean",
			"name": "dispatchEventWith",
			"memberof": "egret.EventDispatcher",
			"scope": "instance",
			"description": "派发一个指定参数的事件。",
			"version": "Egret 2.4",
			"platform": "Web,Native",
			"params": [
				{
					"name": "type",
					"type": "string",
					"description": "事件类型"
				},
				{
					"name": "bubbles",
					"question": true,
					"type": "boolean",
					"description": "确定 Event 对象是否参与事件流的冒泡阶段。默认值为 false。"
				},
				{
					"name": "data",
					"question": true,
					"type": "any",
					"description": "事件data"
				}
			],
			"inherited": true,
			"inherits": "egret.EventDispatcher"
		},
		{
			"kind": "function",
			"type": "void",
			"name": "flush",
			"memberof": "egret.WebSocket",
			"scope": "instance",
			"description": "对套接字输出缓冲区中积累的所有数据进行刷新",
			"version": "Egret 2.4",
			"platform": "Web,Native"
		},
		{
			"kind": "function",
			"type": "boolean",
			"name": "hasEventListener",
			"memberof": "egret.EventDispatcher",
			"scope": "instance",
			"inheritDoc": true,
			"version": "Egret 2.4",
			"platform": "Web,Native",
			"params": [
				{
					"name": "type",
					"type": "string",
					"description": "事件的类型。"
				}
			],
			"inherited": true,
			"inherits": "egret.EventDispatcher",
			"description": "检查 EventDispatcher 对象是否为特定事件类型注册了任何侦听器。这样，您就可以确定 EventDispatcher 对象在事件流层次结构中的哪个位置改变了对事件类型的处理。要确定特定事件类型是否确实会触发事件侦听器，请使用 IEventDispatcher.willTrigger()。hasEventListener()与 willTrigger() 的区别是：hasEventListener() 只检查它所属的对象，而 willTrigger() 检查整个事件流以查找由 type 参数指定的事件。",
			"returns": "如果指定类型的侦听器已注册，则值为 true；否则，值为 false。",
			"see": [
				"#willTrigger()"
			]
		},
		{
			"kind": "function",
			"type": "void",
			"name": "once",
			"memberof": "egret.EventDispatcher",
			"scope": "instance",
			"inheritDoc": true,
			"version": "Egret 2.4",
			"platform": "Web,Native",
			"params": [
				{
					"name": "type",
					"type": "string",
					"description": "事件的类型。"
				},
				{
					"name": "listener",
					"type": "Function",
					"description": "处理事件的侦听器函数。此函数必须接受 Event 对象作为其唯一的参数，并且不能返回任何结果，如下面的示例所示： function(evt:Event):void 函数可以有任何名称。"
				},
				{
					"name": "thisObject",
					"type": "any",
					"description": "侦听函数绑定的this对象"
				},
				{
					"name": "useCapture",
					"question": true,
					"type": "boolean",
					"description": "确定侦听器是运行于捕获阶段还是运行于冒泡阶段。如果将 useCapture 设置为 true，则侦听器只在捕获阶段处理事件，而不在冒泡阶段处理事件。如果 useCapture 为 false，则侦听器只在冒泡阶段处理事件。要在两个阶段都侦听事件，请调用 once() 两次：一次将 useCapture 设置为 true，一次将 useCapture 设置为 false。"
				},
				{
					"name": "priority",
					"question": true,
					"type": "number",
					"description": "事件侦听器的优先级。优先级由一个带符号整数指定。数字越大，优先级越高。优先级为 n 的所有侦听器会在优先级为 n -1 的侦听器之前得到处理。如果两个或更多个侦听器共享相同的优先级，则按照它们的添加顺序进行处理。默认优先级为 0。"
				}
			],
			"inherited": true,
			"inherits": "egret.EventDispatcher",
			"description": "添加仅回调一次的事件侦听器，此方法与on()方法不同，on()方法会持续产生回调，而此方法在第一次回调时就会自动移除监听。",
			"see": [
				"#on()",
				"#removeEventListener()"
			]
		},
		{
			"kind": "function",
			"type": "void",
			"name": "readBytes",
			"memberof": "egret.WebSocket",
			"scope": "instance",
			"description": "从套接字读取 length 参数指定的数据字节数。从 offset 所表示的位置开始，将这些字节读入指定的字节数组",
			"version": "Egret 2.4",
			"platform": "Web,Native",
			"params": [
				{
					"name": "bytes",
					"type": "egret.ByteArray",
					"description": "要将数据读入的 ByteArray 对象"
				},
				{
					"name": "offset",
					"type": "number",
					"default": "0",
					"description": "数据读取的偏移量应从该字节数组中开始"
				},
				{
					"name": "length",
					"type": "number",
					"default": "0",
					"description": "要读取的字节数。默认值 0 导致读取所有可用的数据"
				}
			]
		},
		{
			"kind": "function",
			"type": "string",
			"name": "readUTF",
			"memberof": "egret.WebSocket",
			"scope": "instance",
			"description": "从套接字读取一个 UTF-8 字符串",
			"returns": "",
			"version": "Egret 2.4",
			"platform": "Web,Native"
		},
		{
			"kind": "function",
			"type": "void",
			"name": "removeEventListener",
			"memberof": "egret.EventDispatcher",
			"scope": "instance",
			"inheritDoc": true,
			"version": "Egret 2.4",
			"platform": "Web,Native",
			"params": [
				{
					"name": "type",
					"type": "string",
					"description": "事件的类型。"
				},
				{
					"name": "listener",
					"type": "Function",
					"description": "要删除的侦听器对象"
				},
				{
					"name": "thisObject",
					"type": "any",
					"description": "侦听函数绑定的this对象"
				},
				{
					"name": "useCapture",
					"question": true,
					"type": "boolean",
					"description": "指出是为捕获阶段还是为冒泡阶段注册了侦听器。如果为捕获阶段以及冒泡阶段注册了侦听器，则需要对removeEventListener() 进行两次调用才能将这两个侦听器删除：一次调用将 useCapture 设置为 true，另一次调用将 useCapture 设置为 false。。"
				}
			],
			"inherited": true,
			"inherits": "egret.EventDispatcher",
			"description": "从 EventDispatcher 对象中删除侦听器。如果没有向 EventDispatcher 对象注册任何匹配的侦听器，则对此方法的调用没有任何效果。"
		},
		{
			"kind": "function",
			"type": "boolean",
			"name": "willTrigger",
			"memberof": "egret.EventDispatcher",
			"scope": "instance",
			"inheritDoc": true,
			"version": "Egret 2.4",
			"platform": "Web,Native",
			"params": [
				{
					"name": "type",
					"type": "string",
					"description": "事件类型"
				}
			],
			"inherited": true,
			"inherits": "egret.EventDispatcher",
			"description": "检查是否用此 EventDispatcher 对象或其任何始祖为指定事件类型注册了事件侦听器。将指定类型的事件调度给此EventDispatcher 对象或其任一后代时，如果在事件流的任何阶段触发了事件侦听器，则此方法返回 true。hasEventListener() 与 willTrigger() 方法的区别是：hasEventListener() 只检查它所属的对象，而 willTrigger() 方法检查整个事件流以查找由 type 参数指定的事件。",
			"returns": "是否注册过监听器，如果注册过返回true，反之返回false",
			"see": [
				"#hasEventListener()"
			]
		},
		{
			"kind": "function",
			"type": "void",
			"name": "writeBytes",
			"memberof": "egret.WebSocket",
			"scope": "instance",
			"description": "从指定的字节数组写入一系列字节。写入操作从 offset 指定的位置开始。如果省略了 length 参数，则默认长度 0 将导致该方法从 offset 开始写入整个缓冲区。如果还省略了 offset 参数，则写入整个缓冲区。",
			"version": "Egret 2.4",
			"platform": "Web,Native",
			"params": [
				{
					"name": "bytes",
					"type": "egret.ByteArray",
					"description": "要从中读取数据的 ByteArray 对象"
				},
				{
					"name": "offset",
					"type": "number",
					"default": "0",
					"description": "ByteArray 对象中从零开始的偏移量，应由此开始执行数据写入"
				},
				{
					"name": "length",
					"type": "number",
					"default": "0",
					"description": "要写入的字节数。默认值 0 导致从 offset 参数指定的值开始写入整个缓冲区"
				}
			]
		},
		{
			"kind": "function",
			"type": "void",
			"name": "writeUTF",
			"memberof": "egret.WebSocket",
			"scope": "instance",
			"description": "将字符串数据写入套接字",
			"version": "Egret 2.4",
			"platform": "Web,Native",
			"params": [
				{
					"name": "message",
					"type": "string",
					"description": "要写入套接字的字符串"
				}
			]
		}
	],
	"globalMember": [],
	"globalFunction": [],
	"class": {
		"kind": "class",
		"name": "WebSocket",
		"memberof": "egret",
		"filename": "extension/socket/WebSocket.ts",
		"description": "egret.WebSocket 类启用代码以建立传输控制协议 (TCP) 套接字连接，用于发送和接收字符串或二进制数据。要使用 egret.WebSocket 类的方法，请先使用构造函数 new egret.WebSocket 创建一个 egret.WebSocket 对象。套接字以异步方式传输和接收数据。",
		"event": [
			{
				"name": "egret.Event.CONNECT",
				"description": "连接服务器成功。"
			},
			{
				"name": "egret.ProgressEvent.SOCKET_DATA",
				"description": "接收服务器数据。"
			},
			{
				"name": "egret.Event.CLOSE",
				"description": "在服务器关闭连接时调度。"
			},
			{
				"name": "egret.IOErrorEvent.IO_ERROR",
				"description": "在出现输入/输出错误并导致发送或加载操作失败时调度。。"
			}
		],
		"see": [
			"http://edn.egret.com/cn/index.php/article/index/id/164 WebSocket"
		],
		"version": "Egret 2.4",
		"platform": "Web,Native",
		"example": "<pre>/**<br/>&nbsp;*&nbsp;下面的示例使用&nbsp;WebSocketExample&nbsp;类创建新&nbsp;WebSocket&nbsp;对象，然后与服务器通讯。<br/>&nbsp;*/<br/>class&nbsp;WebSocketExample&nbsp;extends&nbsp;egret.DisplayObjectContainer&nbsp;{<br/><br/>&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;constructor()&nbsp;{<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;super();<br/><br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this.initStateText();<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this.initWebSocket();<br/>&nbsp;&nbsp;&nbsp;&nbsp;}<br/><br/>&nbsp;&nbsp;&nbsp;&nbsp;private&nbsp;stateText:egret.TextField;<br/>&nbsp;&nbsp;&nbsp;&nbsp;private&nbsp;text:string&nbsp;=&nbsp;&quot;TestWebSocket&quot;;<br/><br/>&nbsp;&nbsp;&nbsp;&nbsp;private&nbsp;initStateText():void&nbsp;{<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this.stateText&nbsp;=&nbsp;new&nbsp;egret.TextField();<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this.stateText.size&nbsp;=&nbsp;22;<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this.stateText.text&nbsp;=&nbsp;this.text;<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this.stateText.width&nbsp;=&nbsp;480;<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this.addChild(this.stateText);<br/>&nbsp;&nbsp;&nbsp;&nbsp;}<br/><br/>&nbsp;&nbsp;&nbsp;&nbsp;private&nbsp;socket:egret.WebSocket;<br/><br/>&nbsp;&nbsp;&nbsp;&nbsp;private&nbsp;initWebSocket():void&nbsp;{<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//创建&nbsp;WebSocket&nbsp;对象<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this.socket&nbsp;=&nbsp;new&nbsp;egret.WebSocket();<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//设置数据格式为二进制，默认为字符串<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this.socket.type&nbsp;=&nbsp;egret.WebSocket.TYPE_BINARY;<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//添加收到数据侦听，收到数据会调用此方法<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this.socket.addEventListener(egret.ProgressEvent.SOCKET_DATA,&nbsp;this.onReceiveMessage,&nbsp;this);<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//添加链接打开侦听，连接成功会调用此方法<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this.socket.addEventListener(egret.Event.CONNECT,&nbsp;this.onSocketOpen,&nbsp;this);<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//添加链接关闭侦听，手动关闭或者服务器关闭连接会调用此方法<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this.socket.addEventListener(egret.Event.CLOSE,&nbsp;this.onSocketClose,&nbsp;this);<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//添加异常侦听，出现异常会调用此方法<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this.socket.addEventListener(egret.IOErrorEvent.IO_ERROR,&nbsp;this.onSocketError,&nbsp;this);<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//连接服务器<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this.socket.connect(&quot;echo.websocket.org&quot;,&nbsp;80);<br/>&nbsp;&nbsp;&nbsp;&nbsp;}<br/><br/>&nbsp;&nbsp;&nbsp;&nbsp;private&nbsp;sendData():void&nbsp;{<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//创建&nbsp;ByteArray&nbsp;对象<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;byte:egret.ByteArray&nbsp;=&nbsp;new&nbsp;egret.ByteArray();<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//写入字符串信息<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;byte.writeUTF(&quot;Hello&nbsp;Egret&nbsp;WebSocket&quot;);<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//写入布尔值信息<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;byte.writeBoolean(false);<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//写入int值信息<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;byte.writeInt(123);<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;byte.position&nbsp;=&nbsp;0;<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//发送数据<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this.socket.writeBytes(byte,&nbsp;0,&nbsp;byte.bytesAvailable);<br/>&nbsp;&nbsp;&nbsp;&nbsp;}<br/><br/>&nbsp;&nbsp;&nbsp;&nbsp;private&nbsp;onSocketOpen():void&nbsp;{<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this.trace(&quot;WebSocketOpen&quot;);<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this.sendData();<br/>&nbsp;&nbsp;&nbsp;&nbsp;}<br/><br/>&nbsp;&nbsp;&nbsp;&nbsp;private&nbsp;onSocketClose():void&nbsp;{<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this.trace(&quot;WebSocketClose&quot;);<br/>&nbsp;&nbsp;&nbsp;&nbsp;}<br/><br/>&nbsp;&nbsp;&nbsp;&nbsp;private&nbsp;onSocketError():void&nbsp;{<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this.trace(&quot;WebSocketError&quot;);<br/>&nbsp;&nbsp;&nbsp;&nbsp;}<br/><br/>&nbsp;&nbsp;&nbsp;&nbsp;private&nbsp;onReceiveMessage(e:egret.Event):void&nbsp;{<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//创建&nbsp;ByteArray&nbsp;对象<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;byte:egret.ByteArray&nbsp;=&nbsp;new&nbsp;egret.ByteArray();<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//读取数据<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this.socket.readBytes(byte);<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//读取字符串信息<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;msg:string&nbsp;=&nbsp;byte.readUTF();<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//读取布尔值信息<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;boo:boolean&nbsp;=&nbsp;byte.readBoolean();<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//读取int值信息<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;num:number&nbsp;=&nbsp;byte.readInt();<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this.trace(&quot;收到数据:&quot;);<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this.trace(&quot;readUTF&nbsp;:&nbsp;&quot;+msg);<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this.trace(&quot;readBoolean&nbsp;:&nbsp;&quot;+boo.toString());<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this.trace(&quot;readInt&nbsp;:&nbsp;&quot;+num.toString());<br/>&nbsp;&nbsp;&nbsp;&nbsp;}<br/><br/><br/>&nbsp;&nbsp;&nbsp;&nbsp;private&nbsp;trace(msg:any):void&nbsp;{<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this.text&nbsp;=&nbsp;this.text&nbsp;+&nbsp;&quot;\\n&quot;&nbsp;+&nbsp;msg;<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this.stateText.text&nbsp;=&nbsp;this.text;<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;console.log(msg);<br/>&nbsp;&nbsp;&nbsp;&nbsp;}<br/>}<br/></pre>",
		"augments": [
			"egret.EventDispatcher",
			"egret.HashObject"
		]
	}
}