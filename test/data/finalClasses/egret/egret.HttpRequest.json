{
	"member": [
		{
			"kind": "member",
			"type": "number",
			"name": "hashCode",
			"memberof": "egret.HashObject",
			"scope": "instance",
			"rwType": 1,
			"description": "返回此对象唯一的哈希值,用于唯一确定一个对象。hashCode为大于等于1的整数。",
			"version": "Egret 2.4",
			"platform": "Web,Native",
			"inherited": true,
			"inherits": "egret.HashObject"
		},
		{
			"kind": "member",
			"type": "any",
			"name": "response",
			"memberof": "egret.HttpRequest",
			"scope": "instance",
			"description": "本次请求返回的数据，数据类型根据 responseType 设置的值确定。",
			"rwType": 1,
			"version": "Egret 2.4",
			"platform": "Web,Native"
		},
		{
			"kind": "member",
			"type": "string",
			"name": "responseType",
			"memberof": "egret.HttpRequest",
			"scope": "instance",
			"description": "设置返回的数据格式为文本（HttpResponseType.TEXT）还是二进制数据（HttpResponseType.ArrayBuffer）<br/>注意：若尝试设置此属性为一个非法的值，运行时将使用HttpResponseType.TEXT。",
			"default": "egret.HttpResponseType.TEXT",
			"version": "Egret 2.4",
			"platform": "Web,Native"
		},
		{
			"kind": "member",
			"type": "boolean",
			"name": "withCredentials",
			"memberof": "egret.HttpRequest",
			"scope": "instance",
			"description": "表明在进行跨站(cross-site)的访问控制(Access-Control)请求时，是否使用认证信息(例如cookie或授权的header)。(这个标志不会影响同站的请求)",
			"default": "false",
			"version": "Egret 2.4",
			"platform": "Web,Native"
		}
	],
	"function": [
		{
			"kind": "function",
			"name": "HttpRequest",
			"memberof": "egret.HttpRequest",
			"scope": "instance"
		},
		{
			"kind": "function",
			"type": "void",
			"name": "abort",
			"memberof": "egret.HttpRequest",
			"scope": "instance",
			"description": "如果请求已经被发送,则立刻中止请求.",
			"version": "Egret 2.4",
			"platform": "Web,Native"
		},
		{
			"kind": "function",
			"type": "void",
			"name": "addEventListener",
			"memberof": "egret.EventDispatcher",
			"scope": "instance",
			"inheritDoc": true,
			"version": "Egret 2.4",
			"platform": "Web,Native",
			"params": [
				{
					"name": "type",
					"type": "string",
					"description": "事件的类型。"
				},
				{
					"name": "listener",
					"type": "Function",
					"description": "处理事件的侦听器函数。此函数必须接受 Event 对象作为其唯一的参数，并且不能返回任何结果，如下面的示例所示： function(evt:Event):void 函数可以有任何名称。"
				},
				{
					"name": "thisObject",
					"type": "any",
					"description": "侦听函数绑定的this对象"
				},
				{
					"name": "useCapture",
					"question": true,
					"type": "boolean",
					"description": "确定侦听器是运行于捕获阶段还是运行于冒泡阶段。如果将 useCapture 设置为 true，则侦听器只在捕获阶段处理事件，而不在冒泡阶段处理事件。如果 useCapture 为 false，则侦听器只在冒泡阶段处理事件。要在两个阶段都侦听事件，请调用 on() 两次：一次将 useCapture 设置为 true，一次将 useCapture 设置为 false。"
				},
				{
					"name": "priority",
					"question": true,
					"type": "number",
					"description": "事件侦听器的优先级。优先级由一个带符号的整数指定。数字越大，优先级越高。优先级为 n 的所有侦听器会在优先级为 n -1 的侦听器之前得到处理。如果两个或更多个侦听器共享相同的优先级，则按照它们的添加顺序进行处理。默认优先级为 0。"
				}
			],
			"inherited": true,
			"inherits": "egret.EventDispatcher",
			"description": "使用 EventDispatcher 对象注册事件侦听器对象，以使侦听器能够接收事件通知。可以为特定类型的事件、阶段和优先级在显示列表的所有节点上注册事件侦听器。成功注册一个事件侦听器后，无法通过额外调用 on() 来更改其优先级。要更改侦听器的优先级，必须先调用 removeEventListener()。然后，可以使用新的优先级再次注册该侦听器。注册该侦听器后，如果继续调用具有不同 type 或 useCapture值的 on()，则会创建单独的侦听器注册。<br/>如果不再需要某个事件侦听器，可调用 EventDispatcher.removeEventListener()删除它；否则会产生内存问题。由于垃圾回收器不会删除仍包含引用的对象，因此不会从内存中自动删除使用已注册事件侦听器的对象。复制EventDispatcher 实例时并不复制其中附加的事件侦听器。（如果新近创建的节点需要一个事件侦听器，必须在创建该节点后附加该侦听器。）但是，如果移动 EventDispatcher 实例，则其中附加的事件侦听器也会随之移动。如果在正在处理事件的节点上注册事件侦听器，则不会在当前阶段触发事件侦听器，但会在事件流的稍后阶段触发，如冒泡阶段。如果从正在处理事件的节点中删除事件侦听器，则该事件侦听器仍由当前操作触发。删除事件侦听器后，决不会再次调用该事件侦听器（除非再次注册以备将来处理）。",
			"see": [
				"#once()",
				"#removeEventListener()"
			]
		},
		{
			"kind": "function",
			"type": "boolean",
			"name": "dispatchEvent",
			"memberof": "egret.EventDispatcher",
			"scope": "instance",
			"inheritDoc": true,
			"version": "Egret 2.4",
			"platform": "Web,Native",
			"params": [
				{
					"name": "event",
					"type": "egret.Event",
					"description": "调度到事件流中的 Event 对象。"
				}
			],
			"inherited": true,
			"inherits": "egret.EventDispatcher",
			"description": "将事件分派到事件流中。事件目标是对其调用 dispatchEvent() 方法的 EventDispatcher 对象。",
			"returns": "如果成功调度了事件，则值为 true。值 false 表示失败或对事件调用了 preventDefault()。"
		},
		{
			"kind": "function",
			"type": "boolean",
			"name": "dispatchEventWith",
			"memberof": "egret.EventDispatcher",
			"scope": "instance",
			"description": "派发一个指定参数的事件。",
			"version": "Egret 2.4",
			"platform": "Web,Native",
			"params": [
				{
					"name": "type",
					"type": "string",
					"description": "事件类型"
				},
				{
					"name": "bubbles",
					"question": true,
					"type": "boolean",
					"description": "确定 Event 对象是否参与事件流的冒泡阶段。默认值为 false。"
				},
				{
					"name": "data",
					"question": true,
					"type": "any",
					"description": "事件data"
				},
				{
					"name": "cancelable",
					"question": true,
					"type": "boolean",
					"description": "确定是否可以取消 Event 对象。默认值为 false。"
				}
			],
			"inherited": true,
			"inherits": "egret.EventDispatcher"
		},
		{
			"kind": "function",
			"type": "string",
			"name": "getAllResponseHeaders",
			"memberof": "egret.HttpRequest",
			"scope": "instance",
			"description": "返回所有响应头信息(响应头名和值), 如果响应头还没接受,则返回\"\".",
			"version": "Egret 2.4",
			"platform": "Web,Native"
		},
		{
			"kind": "function",
			"type": "string",
			"name": "getResponseHeader",
			"memberof": "egret.HttpRequest",
			"scope": "instance",
			"description": "返回指定的响应头的值, 如果响应头还没被接受,或该响应头不存在,则返回\"\".",
			"version": "Egret 2.4",
			"platform": "Web,Native",
			"params": [
				{
					"name": "header",
					"type": "string",
					"description": "要返回的响应头名称"
				}
			]
		},
		{
			"kind": "function",
			"type": "boolean",
			"name": "hasEventListener",
			"memberof": "egret.EventDispatcher",
			"scope": "instance",
			"inheritDoc": true,
			"version": "Egret 2.4",
			"platform": "Web,Native",
			"params": [
				{
					"name": "type",
					"type": "string",
					"description": "事件的类型。"
				}
			],
			"inherited": true,
			"inherits": "egret.EventDispatcher",
			"description": "检查 EventDispatcher 对象是否为特定事件类型注册了任何侦听器。这样，您就可以确定 EventDispatcher 对象在事件流层次结构中的哪个位置改变了对事件类型的处理。要确定特定事件类型是否确实会触发事件侦听器，请使用 IEventDispatcher.willTrigger()。hasEventListener()与 willTrigger() 的区别是：hasEventListener() 只检查它所属的对象，而 willTrigger() 检查整个事件流以查找由 type 参数指定的事件。",
			"returns": "如果指定类型的侦听器已注册，则值为 true；否则，值为 false。",
			"see": [
				"#willTrigger()"
			]
		},
		{
			"kind": "function",
			"type": "void",
			"name": "once",
			"memberof": "egret.EventDispatcher",
			"scope": "instance",
			"inheritDoc": true,
			"version": "Egret 2.4",
			"platform": "Web,Native",
			"params": [
				{
					"name": "type",
					"type": "string",
					"description": "事件的类型。"
				},
				{
					"name": "listener",
					"type": "Function",
					"description": "处理事件的侦听器函数。此函数必须接受 Event 对象作为其唯一的参数，并且不能返回任何结果，如下面的示例所示： function(evt:Event):void 函数可以有任何名称。"
				},
				{
					"name": "thisObject",
					"type": "any",
					"description": "侦听函数绑定的this对象"
				},
				{
					"name": "useCapture",
					"question": true,
					"type": "boolean",
					"description": "确定侦听器是运行于捕获阶段还是运行于冒泡阶段。如果将 useCapture 设置为 true，则侦听器只在捕获阶段处理事件，而不在冒泡阶段处理事件。如果 useCapture 为 false，则侦听器只在冒泡阶段处理事件。要在两个阶段都侦听事件，请调用 once() 两次：一次将 useCapture 设置为 true，一次将 useCapture 设置为 false。"
				},
				{
					"name": "priority",
					"question": true,
					"type": "number",
					"description": "事件侦听器的优先级。优先级由一个带符号整数指定。数字越大，优先级越高。优先级为 n 的所有侦听器会在优先级为 n -1 的侦听器之前得到处理。如果两个或更多个侦听器共享相同的优先级，则按照它们的添加顺序进行处理。默认优先级为 0。"
				}
			],
			"inherited": true,
			"inherits": "egret.EventDispatcher",
			"description": "添加仅回调一次的事件侦听器，此方法与on()方法不同，on()方法会持续产生回调，而此方法在第一次回调时就会自动移除监听。",
			"see": [
				"#on()",
				"#removeEventListener()"
			]
		},
		{
			"kind": "function",
			"type": "void",
			"name": "open",
			"memberof": "egret.HttpRequest",
			"scope": "instance",
			"description": "初始化一个请求.<br/>注意: 若在已经发出请求的对象上调用此方法，相当于立即调用abort().",
			"see": [
				"egret.HttpMethod"
			],
			"version": "Egret 2.4",
			"platform": "Web,Native",
			"params": [
				{
					"name": "url",
					"type": "string",
					"description": "该请求所要访问的URL该请求所要访问的URL"
				},
				{
					"name": "method",
					"question": true,
					"type": "string",
					"description": "请求所使用的HTTP方法， 请使用 HttpMethod 定义的枚举值."
				}
			]
		},
		{
			"kind": "function",
			"type": "void",
			"name": "removeEventListener",
			"memberof": "egret.EventDispatcher",
			"scope": "instance",
			"inheritDoc": true,
			"version": "Egret 2.4",
			"platform": "Web,Native",
			"params": [
				{
					"name": "type",
					"type": "string",
					"description": "事件的类型。"
				},
				{
					"name": "listener",
					"type": "Function",
					"description": "要删除的侦听器对象"
				},
				{
					"name": "thisObject",
					"type": "any",
					"description": "侦听函数绑定的this对象"
				},
				{
					"name": "useCapture",
					"question": true,
					"type": "boolean",
					"description": "指出是为捕获阶段还是为冒泡阶段注册了侦听器。如果为捕获阶段以及冒泡阶段注册了侦听器，则需要对removeEventListener() 进行两次调用才能将这两个侦听器删除：一次调用将 useCapture 设置为 true，另一次调用将 useCapture 设置为 false。。"
				}
			],
			"inherited": true,
			"inherits": "egret.EventDispatcher",
			"description": "从 EventDispatcher 对象中删除侦听器。如果没有向 EventDispatcher 对象注册任何匹配的侦听器，则对此方法的调用没有任何效果。"
		},
		{
			"kind": "function",
			"type": "void",
			"name": "send",
			"memberof": "egret.HttpRequest",
			"scope": "instance",
			"description": "发送请求.",
			"version": "Egret 2.4",
			"platform": "Web,Native",
			"params": [
				{
					"name": "data",
					"question": true,
					"type": "any",
					"description": "需要发送的数据"
				}
			]
		},
		{
			"kind": "function",
			"type": "void",
			"name": "setRequestHeader",
			"memberof": "egret.HttpRequest",
			"scope": "instance",
			"description": "给指定的HTTP请求头赋值.在这之前,您必须确认已经调用 open() 方法打开了一个url.",
			"version": "Egret 2.4",
			"platform": "Web,Native",
			"params": [
				{
					"name": "header",
					"type": "string",
					"description": "将要被赋值的请求头名称."
				},
				{
					"name": "value",
					"type": "string",
					"description": "给指定的请求头赋的值."
				}
			]
		},
		{
			"kind": "function",
			"type": "boolean",
			"name": "willTrigger",
			"memberof": "egret.EventDispatcher",
			"scope": "instance",
			"inheritDoc": true,
			"version": "Egret 2.4",
			"platform": "Web,Native",
			"params": [
				{
					"name": "type",
					"type": "string",
					"description": "事件类型"
				}
			],
			"inherited": true,
			"inherits": "egret.EventDispatcher",
			"description": "检查是否用此 EventDispatcher 对象或其任何始祖为指定事件类型注册了事件侦听器。将指定类型的事件调度给此EventDispatcher 对象或其任一后代时，如果在事件流的任何阶段触发了事件侦听器，则此方法返回 true。hasEventListener() 与 willTrigger() 方法的区别是：hasEventListener() 只检查它所属的对象，而 willTrigger() 方法检查整个事件流以查找由 type 参数指定的事件。",
			"returns": "是否注册过监听器，如果注册过返回true，反之返回false",
			"see": [
				"#hasEventListener()"
			]
		}
	],
	"globalMember": [],
	"globalFunction": [],
	"class": {
		"kind": "class",
		"name": "HttpRequest",
		"memberof": "egret",
		"filename": "egret/net/HttpRequest.ts",
		"description": "HttpRequest 类以文本或二进制数据的形式从 URL 下载数据。HttpRequest 对象会先从 URL 中下载所有数据，然后才将数据用于应用程序中的代码。它会发出有关下载进度的通知，通过 bytesLoaded 和 bytesTotal 属性以及已调度的事件，可以监视下载进度。",
		"event": [
			{
				"name": "egret.Event.COMPLETE",
				"description": "加载完成"
			},
			{
				"name": "egret.Event.IO_ERROR",
				"description": "加载失败"
			},
			{
				"name": "egret.ProgressEvent.PROGRESS",
				"description": "加载进度，可通过event.bytesLoaded和event.bytesTotal统计进度信息。"
			}
		],
		"see": [
			"egret.HttpMethod",
			"egret.HttpResponseType"
		],
		"example": "<pre>/**<br/>&nbsp;*&nbsp;下面的示例使用&nbsp;egret.HttpRequest&nbsp;类进行网络通信。<br/>&nbsp;*/<br/>class&nbsp;HttpRequestExample&nbsp;extends&nbsp;egret.DisplayObjectContainer&nbsp;{<br/><br/>&nbsp;&nbsp;&nbsp;&nbsp;private&nbsp;statusGetLabel:egret.TextField;<br/>&nbsp;&nbsp;&nbsp;&nbsp;private&nbsp;statusPostLabel:egret.TextField;<br/><br/>&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;constructor()&nbsp;{<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;super();<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this.sendGetRequest();<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this.sendPostRequest();<br/>&nbsp;&nbsp;&nbsp;&nbsp;}<br/><br/>&nbsp;&nbsp;&nbsp;&nbsp;private&nbsp;sendGetRequest():void&nbsp;{<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;statusGetLabel&nbsp;=&nbsp;new&nbsp;egret.TextField();<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this.statusGetLabel&nbsp;=&nbsp;statusGetLabel;<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;statusGetLabel.size&nbsp;=&nbsp;18;<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;statusGetLabel.text&nbsp;=&nbsp;&quot;GET&nbsp;request&nbsp;being&nbsp;sent&nbsp;to&nbsp;httpbin.org&quot;;<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this.addChild(statusGetLabel);<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;statusGetLabel.x&nbsp;=&nbsp;50;<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;statusGetLabel.y&nbsp;=&nbsp;40;<br/><br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;request&nbsp;=&nbsp;new&nbsp;egret.HttpRequest();<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;request.responseType&nbsp;=&nbsp;egret.HttpResponseType.TEXT;<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;request.open(&quot;http://httpbin.org/get&quot;,egret.HttpMethod.GET);<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;request.send();<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;request.addEventListener(egret.Event.COMPLETE,this.onGetComplete,this);<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;request.addEventListener(egret.IOErrorEvent.IO_ERROR,this.onGetIOError,this);<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;request.addEventListener(egret.ProgressEvent.PROGRESS,this.onGetProgress,this);<br/>&nbsp;&nbsp;&nbsp;&nbsp;}<br/><br/>&nbsp;&nbsp;&nbsp;&nbsp;private&nbsp;onGetComplete(event:egret.Event):void&nbsp;{<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;request&nbsp;=&nbsp;&lt;egret.HttpRequest&gt;event.currentTarget;<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;console.log(&quot;get&nbsp;data&nbsp;:&nbsp;&quot;,request.response);<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;responseLabel&nbsp;=&nbsp;new&nbsp;egret.TextField();<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;responseLabel.size&nbsp;=&nbsp;18;<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;responseLabel.text&nbsp;=&nbsp;&quot;GET&nbsp;response:&nbsp;\\n&quot;&nbsp;+&nbsp;request.response.substring(0,&nbsp;50)&nbsp;+&nbsp;&quot;...&quot;;<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this.addChild(responseLabel);<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;responseLabel.x&nbsp;=&nbsp;50;<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;responseLabel.y&nbsp;=&nbsp;70;<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this.statusGetLabel.text&nbsp;=&nbsp;&quot;Get&nbsp;GET&nbsp;response!&quot;;<br/>&nbsp;&nbsp;&nbsp;&nbsp;}<br/><br/>&nbsp;&nbsp;&nbsp;&nbsp;private&nbsp;onGetIOError(event:egret.IOErrorEvent):void&nbsp;{<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;console.log(&quot;get&nbsp;error&nbsp;:&nbsp;&quot;&nbsp;+&nbsp;event);<br/>&nbsp;&nbsp;&nbsp;&nbsp;}<br/><br/>&nbsp;&nbsp;&nbsp;&nbsp;private&nbsp;onGetProgress(event:egret.ProgressEvent):void&nbsp;{<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;console.log(&quot;get&nbsp;progress&nbsp;:&nbsp;&quot;&nbsp;+&nbsp;Math.floor(100*event.bytesLoaded/event.bytesTotal)&nbsp;+&nbsp;&quot;%&quot;);<br/>&nbsp;&nbsp;&nbsp;&nbsp;}<br/><br/>&nbsp;&nbsp;&nbsp;&nbsp;private&nbsp;sendPostRequest()&nbsp;{<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;statusPostLabel&nbsp;=&nbsp;new&nbsp;egret.TextField();<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this.statusPostLabel&nbsp;=&nbsp;statusPostLabel;<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this.addChild(statusPostLabel);<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;statusPostLabel.size&nbsp;=&nbsp;18;<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;statusPostLabel.x&nbsp;=&nbsp;300;<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;statusPostLabel.y&nbsp;=&nbsp;40;<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;statusPostLabel.text&nbsp;=&nbsp;&quot;Sending&nbsp;POST&nbsp;request&nbsp;to&nbsp;httpbin.org&quot;;<br/><br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;request&nbsp;=&nbsp;new&nbsp;egret.HttpRequest();<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;request.responseType&nbsp;=&nbsp;egret.HttpResponseType.TEXT;<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;request.open(&quot;http://httpbin.org/post&quot;,egret.HttpMethod.POST);<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;request.send();<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;request.addEventListener(egret.Event.COMPLETE,this.onPostComplete,this);<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;request.addEventListener(egret.IOErrorEvent.IO_ERROR,this.onPostIOError,this);<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;request.addEventListener(egret.ProgressEvent.PROGRESS,this.onPostProgress,this);<br/>&nbsp;&nbsp;&nbsp;&nbsp;}<br/><br/>&nbsp;&nbsp;&nbsp;&nbsp;private&nbsp;onPostComplete(event:egret.Event):void&nbsp;{<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;request&nbsp;=&nbsp;&lt;egret.HttpRequest&gt;event.currentTarget;<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;console.log(&quot;post&nbsp;data&nbsp;:&nbsp;&quot;,request.response);<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;responseLabel&nbsp;=&nbsp;new&nbsp;egret.TextField();<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;responseLabel.size&nbsp;=&nbsp;18;<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;responseLabel.text&nbsp;=&nbsp;&quot;POST&nbsp;response:\\n&quot;&nbsp;+&nbsp;request.response.substring(0,&nbsp;50)&nbsp;+&nbsp;&quot;...&quot;;<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this.addChild(responseLabel);<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;responseLabel.x&nbsp;=&nbsp;300;<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;responseLabel.y&nbsp;=&nbsp;70;<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this.statusPostLabel.text&nbsp;=&nbsp;&quot;Get&nbsp;POST&nbsp;response!&quot;;<br/>&nbsp;&nbsp;&nbsp;&nbsp;}<br/><br/>&nbsp;&nbsp;&nbsp;&nbsp;private&nbsp;onPostIOError(event:egret.IOErrorEvent):void&nbsp;{<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;console.log(&quot;post&nbsp;error&nbsp;:&nbsp;&quot;&nbsp;+&nbsp;event);<br/>&nbsp;&nbsp;&nbsp;&nbsp;}<br/><br/>&nbsp;&nbsp;&nbsp;&nbsp;private&nbsp;onPostProgress(event:egret.ProgressEvent):void&nbsp;{<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;console.log(&quot;post&nbsp;progress&nbsp;:&nbsp;&quot;&nbsp;+&nbsp;Math.floor(100*event.bytesLoaded/event.bytesTotal)&nbsp;+&nbsp;&quot;%&quot;);<br/>&nbsp;&nbsp;&nbsp;&nbsp;}<br/>}</pre>",
		"version": "Egret 2.4",
		"platform": "Web,Native",
		"augments": [
			"egret.EventDispatcher",
			"egret.HashObject"
		]
	}
}