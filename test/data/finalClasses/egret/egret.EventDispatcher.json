{
	"member": [
		{
			"kind": "member",
			"type": "number",
			"name": "hashCode",
			"memberof": "egret.HashObject",
			"scope": "instance",
			"rwType": 1,
			"description": "返回此对象唯一的哈希值,用于唯一确定一个对象。hashCode为大于等于1的整数。",
			"version": "Egret 2.4",
			"platform": "Web,Native",
			"pType": "public",
			"inherited": true,
			"inherits": "egret.HashObject"
		}
	],
	"function": [
		{
			"kind": "function",
			"name": "EventDispatcher",
			"memberof": "egret.EventDispatcher",
			"scope": "instance",
			"description": "创建一个 EventDispatcher 类的实例",
			"version": "Egret 2.4",
			"platform": "Web,Native",
			"params": [
				{
					"name": "target",
					"type": "egret.IEventDispatcher",
					"default": "null",
					"description": "此 EventDispatcher 所抛出事件对象的 target 指向。此参数主要用于一个实现了 IEventDispatcher 接口的自定义类，以便抛出的事件对象的 target 属性可以指向自定义类自身。请勿在直接继承 EventDispatcher 的情况下使用此参数。"
				}
			],
			"pType": "public"
		},
		{
			"kind": "function",
			"type": "void",
			"name": "addEventListener",
			"memberof": "egret.EventDispatcher",
			"scope": "instance",
			"inheritDoc": true,
			"version": "Egret 2.4",
			"platform": "Web,Native",
			"params": [
				{
					"name": "type",
					"type": "string",
					"description": "事件的类型。"
				},
				{
					"name": "listener",
					"type": "Function",
					"description": "处理事件的侦听器函数。此函数必须接受 Event 对象作为其唯一的参数，并且不能返回任何结果，如下面的示例所示： function(evt:Event):void 函数可以有任何名称。"
				},
				{
					"name": "thisObject",
					"type": "any",
					"description": "侦听函数绑定的this对象"
				},
				{
					"name": "useCapture",
					"question": true,
					"type": "boolean",
					"description": "确定侦听器是运行于捕获阶段还是运行于冒泡阶段。如果将 useCapture 设置为 true，则侦听器只在捕获阶段处理事件，而不在冒泡阶段处理事件。如果 useCapture 为 false，则侦听器只在冒泡阶段处理事件。要在两个阶段都侦听事件，请调用 on() 两次：一次将 useCapture 设置为 true，一次将 useCapture 设置为 false。"
				},
				{
					"name": "priority",
					"question": true,
					"type": "number",
					"description": "事件侦听器的优先级。优先级由一个带符号的整数指定。数字越大，优先级越高。优先级为 n 的所有侦听器会在优先级为 n -1 的侦听器之前得到处理。如果两个或更多个侦听器共享相同的优先级，则按照它们的添加顺序进行处理。默认优先级为 0。"
				}
			],
			"pType": "public",
			"description": "使用 EventDispatcher 对象注册事件侦听器对象，以使侦听器能够接收事件通知。可以为特定类型的事件、阶段和优先级在显示列表的所有节点上注册事件侦听器。成功注册一个事件侦听器后，无法通过额外调用 on() 来更改其优先级。要更改侦听器的优先级，必须先调用 removeEventListener()。然后，可以使用新的优先级再次注册该侦听器。注册该侦听器后，如果继续调用具有不同 type 或 useCapture值的 on()，则会创建单独的侦听器注册。<br/>如果不再需要某个事件侦听器，可调用 EventDispatcher.removeEventListener()删除它；否则会产生内存问题。由于垃圾回收器不会删除仍包含引用的对象，因此不会从内存中自动删除使用已注册事件侦听器的对象。复制EventDispatcher 实例时并不复制其中附加的事件侦听器。（如果新近创建的节点需要一个事件侦听器，必须在创建该节点后附加该侦听器。）但是，如果移动 EventDispatcher 实例，则其中附加的事件侦听器也会随之移动。如果在正在处理事件的节点上注册事件侦听器，则不会在当前阶段触发事件侦听器，但会在事件流的稍后阶段触发，如冒泡阶段。如果从正在处理事件的节点中删除事件侦听器，则该事件侦听器仍由当前操作触发。删除事件侦听器后，决不会再次调用该事件侦听器（除非再次注册以备将来处理）。",
			"see": [
				"#once()",
				"#removeEventListener()"
			]
		},
		{
			"kind": "function",
			"type": "boolean",
			"name": "dispatchEvent",
			"memberof": "egret.EventDispatcher",
			"scope": "instance",
			"inheritDoc": true,
			"version": "Egret 2.4",
			"platform": "Web,Native",
			"params": [
				{
					"name": "event",
					"type": "egret.Event",
					"description": "调度到事件流中的 Event 对象。"
				}
			],
			"pType": "public",
			"description": "将事件分派到事件流中。事件目标是对其调用 dispatchEvent() 方法的 EventDispatcher 对象。",
			"returns": "如果成功调度了事件，则值为 true。值 false 表示失败或对事件调用了 preventDefault()。"
		},
		{
			"kind": "function",
			"type": "boolean",
			"name": "dispatchEventWith",
			"memberof": "egret.EventDispatcher",
			"scope": "instance",
			"description": "派发一个指定参数的事件。",
			"version": "Egret 2.4",
			"platform": "Web,Native",
			"params": [
				{
					"name": "type",
					"type": "string",
					"description": "事件类型"
				},
				{
					"name": "bubbles",
					"question": true,
					"type": "boolean",
					"description": "确定 Event 对象是否参与事件流的冒泡阶段。默认值为 false。"
				},
				{
					"name": "data",
					"question": true,
					"type": "any",
					"description": "事件data"
				}
			],
			"pType": "public"
		},
		{
			"kind": "function",
			"type": "boolean",
			"name": "hasEventListener",
			"memberof": "egret.EventDispatcher",
			"scope": "instance",
			"inheritDoc": true,
			"version": "Egret 2.4",
			"platform": "Web,Native",
			"params": [
				{
					"name": "type",
					"type": "string",
					"description": "事件的类型。"
				}
			],
			"pType": "public",
			"description": "检查 EventDispatcher 对象是否为特定事件类型注册了任何侦听器。这样，您就可以确定 EventDispatcher 对象在事件流层次结构中的哪个位置改变了对事件类型的处理。要确定特定事件类型是否确实会触发事件侦听器，请使用 IEventDispatcher.willTrigger()。hasEventListener()与 willTrigger() 的区别是：hasEventListener() 只检查它所属的对象，而 willTrigger() 检查整个事件流以查找由 type 参数指定的事件。",
			"returns": "如果指定类型的侦听器已注册，则值为 true；否则，值为 false。",
			"see": [
				"#willTrigger()"
			]
		},
		{
			"kind": "function",
			"type": "void",
			"name": "once",
			"memberof": "egret.EventDispatcher",
			"scope": "instance",
			"inheritDoc": true,
			"version": "Egret 2.4",
			"platform": "Web,Native",
			"params": [
				{
					"name": "type",
					"type": "string",
					"description": "事件的类型。"
				},
				{
					"name": "listener",
					"type": "Function",
					"description": "处理事件的侦听器函数。此函数必须接受 Event 对象作为其唯一的参数，并且不能返回任何结果，如下面的示例所示： function(evt:Event):void 函数可以有任何名称。"
				},
				{
					"name": "thisObject",
					"type": "any",
					"description": "侦听函数绑定的this对象"
				},
				{
					"name": "useCapture",
					"question": true,
					"type": "boolean",
					"description": "确定侦听器是运行于捕获阶段还是运行于冒泡阶段。如果将 useCapture 设置为 true，则侦听器只在捕获阶段处理事件，而不在冒泡阶段处理事件。如果 useCapture 为 false，则侦听器只在冒泡阶段处理事件。要在两个阶段都侦听事件，请调用 once() 两次：一次将 useCapture 设置为 true，一次将 useCapture 设置为 false。"
				},
				{
					"name": "priority",
					"question": true,
					"type": "number",
					"description": "事件侦听器的优先级。优先级由一个带符号整数指定。数字越大，优先级越高。优先级为 n 的所有侦听器会在优先级为 n -1 的侦听器之前得到处理。如果两个或更多个侦听器共享相同的优先级，则按照它们的添加顺序进行处理。默认优先级为 0。"
				}
			],
			"pType": "public",
			"description": "添加仅回调一次的事件侦听器，此方法与on()方法不同，on()方法会持续产生回调，而此方法在第一次回调时就会自动移除监听。",
			"see": [
				"#on()",
				"#removeEventListener()"
			]
		},
		{
			"kind": "function",
			"type": "void",
			"name": "removeEventListener",
			"memberof": "egret.EventDispatcher",
			"scope": "instance",
			"inheritDoc": true,
			"version": "Egret 2.4",
			"platform": "Web,Native",
			"params": [
				{
					"name": "type",
					"type": "string",
					"description": "事件的类型。"
				},
				{
					"name": "listener",
					"type": "Function",
					"description": "要删除的侦听器对象"
				},
				{
					"name": "thisObject",
					"type": "any",
					"description": "侦听函数绑定的this对象"
				},
				{
					"name": "useCapture",
					"question": true,
					"type": "boolean",
					"description": "指出是为捕获阶段还是为冒泡阶段注册了侦听器。如果为捕获阶段以及冒泡阶段注册了侦听器，则需要对removeEventListener() 进行两次调用才能将这两个侦听器删除：一次调用将 useCapture 设置为 true，另一次调用将 useCapture 设置为 false。。"
				}
			],
			"pType": "public",
			"description": "从 EventDispatcher 对象中删除侦听器。如果没有向 EventDispatcher 对象注册任何匹配的侦听器，则对此方法的调用没有任何效果。"
		},
		{
			"kind": "function",
			"type": "boolean",
			"name": "willTrigger",
			"memberof": "egret.EventDispatcher",
			"scope": "instance",
			"inheritDoc": true,
			"version": "Egret 2.4",
			"platform": "Web,Native",
			"params": [
				{
					"name": "type",
					"type": "string",
					"description": "事件类型"
				}
			],
			"pType": "public",
			"description": "检查是否用此 EventDispatcher 对象或其任何始祖为指定事件类型注册了事件侦听器。将指定类型的事件调度给此EventDispatcher 对象或其任一后代时，如果在事件流的任何阶段触发了事件侦听器，则此方法返回 true。hasEventListener() 与 willTrigger() 方法的区别是：hasEventListener() 只检查它所属的对象，而 willTrigger() 方法检查整个事件流以查找由 type 参数指定的事件。",
			"returns": "是否注册过监听器，如果注册过返回true，反之返回false",
			"see": [
				"#hasEventListener()"
			]
		}
	],
	"globalMember": [],
	"globalFunction": [],
	"class": {
		"kind": "class",
		"name": "EventDispatcher",
		"memberof": "egret",
		"filename": "egret/events/EventDispatcher.ts",
		"description": "EventDispatcher 是 Egret 的事件派发器类，负责进行事件的发送和侦听。事件目标是事件如何通过显示列表层次结构这一问题的焦点。当发生鼠标单击、触摸或按键等事件时，框架会将事件对象调度到从显示列表根开始的事件流中。然后该事件对象在显示列表中前进，直到到达事件目标，然后从这一点开始其在显示列表中的回程。在概念上，到事件目标的此往返行程被划分为三个阶段：捕获阶段包括从根到事件目标节点之前的最后一个节点的行程，目标阶段仅包括事件目标节点，冒泡阶段包括回程上遇到的任何后续节点到显示列表的根。通常，使用户定义的类能够调度事件的最简单方法是扩展 EventDispatcher。如果无法扩展（即，如果该类已经扩展了另一个类），则可以实现IEventDispatcher 接口，创建 EventDispatcher 成员，并编写一些简单的映射，将调用连接到聚合的 EventDispatcher 中。",
		"see": [
			"egret.IEventDispatcher"
		],
		"version": "Egret 2.4",
		"platform": "Web,Native",
		"example": "<pre>/**<br/>&nbsp;*&nbsp;以下示例使用&nbsp;EventDispatcherExample&nbsp;和&nbsp;CustomDispatcher&nbsp;类（EventDispatcher&nbsp;的子类）来说明如何创建和调度自定义事件。该示例执行下列任务：<br/>&nbsp;*&nbsp;1.在构造函数创建一个局部变量&nbsp;dispatcher，并将其赋给新的&nbsp;CustomDispatcher&nbsp;实例。<br/>&nbsp;*&nbsp;2.在&nbsp;CustomDispatcher&nbsp;内，设置一个字符串以便事件具有名称&nbsp;action，并且声明&nbsp;doAction()&nbsp;方法。当调用此方法时，此方法将使用&nbsp;EventDispatcher.dispatchEventWith()&nbsp;调度该事件。<br/>&nbsp;*&nbsp;3.然后使用&nbsp;dispatcher&nbsp;属性添加&nbsp;action&nbsp;事件侦听器和关联的订阅者方法&nbsp;actionHandler()，这样在调度事件时可以只输出有关该事件的信息。<br/>&nbsp;*&nbsp;4.调用&nbsp;doAction()&nbsp;方法，从而调度&nbsp;action&nbsp;事件。<br/>&nbsp;*/<br/>class&nbsp;EventDispatcherExample&nbsp;extends&nbsp;egret.DisplayObjectContainer&nbsp;{<br/>&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;constructor()&nbsp;{<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;super();<br/><br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;dispatcher:CustomDispatcher&nbsp;=&nbsp;new&nbsp;CustomDispatcher();<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dispatcher.addEventListener(CustomDispatcher.ACTION,&nbsp;this.onAction,&nbsp;this);<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dispatcher.doAction();<br/>&nbsp;&nbsp;&nbsp;&nbsp;}<br/><br/>&nbsp;&nbsp;&nbsp;&nbsp;private&nbsp;onAction(event:egret.Event):void&nbsp;{<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;console.log(&quot;onAction&quot;);<br/>&nbsp;&nbsp;&nbsp;&nbsp;}<br/>}<br/><br/>class&nbsp;CustomDispatcher&nbsp;extends&nbsp;egret.EventDispatcher&nbsp;{<br/>&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;static&nbsp;ACTION:string&nbsp;=&nbsp;&quot;action&quot;;<br/><br/>&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;doAction():void&nbsp;{<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this.dispatchEventWith(CustomDispatcher.ACTION);<br/>&nbsp;&nbsp;&nbsp;&nbsp;}<br/>}</pre>",
		"augments": [
			"egret.HashObject"
		],
		"implements": [
			{
				"name": "egret.IEventDispatcher"
			}
		],
		"children": [
			"egret.DisplayObject",
			"egret.Sound",
			"egret.HttpRequest",
			"egret.ImageLoader",
			"egret.DeviceOrientation",
			"egret.Geolocation",
			"egret.Motion",
			"egret.Timer",
			"dragonBones.EventDispatcher",
			"eui.ArrayCollection",
			"eui.RadioButtonGroup",
			"eui.Skin",
			"eui.Theme",
			"eui.LayoutBase",
			"egret.MovieClipDataFactory",
			"egret.URLLoader",
			"egret.Ticker",
			"egret.gui.ArrayCollection",
			"egret.gui.ObjectCollection",
			"egret.gui.RadioButtonGroup",
			"egret.gui.Skin",
			"egret.gui.DropDownController",
			"egret.gui.Effect",
			"egret.gui.EffectInstance",
			"egret.gui.LayoutBase",
			"egret.gui.LayoutManager",
			"egret.gui.PopUpManagerImpl",
			"egret.WebSocket",
			"egret.Tween"
		]
	}
}