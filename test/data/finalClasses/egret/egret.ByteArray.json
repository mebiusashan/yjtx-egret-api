{
	"member": [
		{
			"kind": "member",
			"type": "number",
			"name": "bytesAvailable",
			"memberof": "egret.ByteArray",
			"scope": "instance",
			"rwType": 1,
			"description": "可从字节数组的当前位置到数组末尾读取的数据的字节数。每次访问 ByteArray 对象时，将 bytesAvailable 属性与读取方法结合使用，以确保读取有效的数据。",
			"version": "Egret 2.4",
			"platform": "Web,Native"
		},
		{
			"kind": "member",
			"type": "string",
			"name": "endian",
			"memberof": "egret.ByteArray",
			"scope": "instance",
			"description": "更改或读取数据的字节顺序；egret.Endian.BIG_ENDIAN 或 egret.Endian.LITTLE_ENDIAN。",
			"default": "egret.Endian.BIG_ENDIAN",
			"version": "Egret 2.4",
			"platform": "Web,Native"
		},
		{
			"kind": "member",
			"type": "number",
			"name": "length",
			"memberof": "egret.ByteArray",
			"scope": "instance",
			"description": "ByteArray 对象的长度（以字节为单位）。如果将长度设置为大于当前长度的值，则用零填充字节数组的右侧。如果将长度设置为小于当前长度的值，将会截断该字节数组。",
			"version": "Egret 2.4",
			"platform": "Web,Native"
		},
		{
			"kind": "member",
			"type": "number",
			"name": "position",
			"memberof": "egret.ByteArray",
			"scope": "instance",
			"description": "将文件指针的当前位置（以字节为单位）移动或返回到 ByteArray 对象中。下一次调用读取方法时将在此位置开始读取，或者下一次调用写入方法时将在此位置开始写入。",
			"version": "Egret 2.4",
			"platform": "Web,Native"
		}
	],
	"function": [
		{
			"kind": "function",
			"name": "ByteArray",
			"memberof": "egret.ByteArray",
			"scope": "instance",
			"version": "Egret 2.4",
			"platform": "Web,Native",
			"params": [
				{
					"name": "buffer",
					"question": true,
					"type": "ArrayBuffer",
					"description": ""
				}
			]
		},
		{
			"kind": "function",
			"type": "void",
			"name": "clear",
			"memberof": "egret.ByteArray",
			"scope": "instance",
			"description": "清除字节数组的内容，并将 length 和 position 属性重置为 0。",
			"version": "Egret 2.4",
			"platform": "Web,Native"
		},
		{
			"kind": "function",
			"type": "boolean",
			"name": "readBoolean",
			"memberof": "egret.ByteArray",
			"scope": "instance",
			"description": "从字节流中读取布尔值。读取单个字节，如果字节非零，则返回 true，否则返回 false",
			"returns": "如果字节不为零，则返回 true，否则返回 false",
			"version": "Egret 2.4",
			"platform": "Web,Native"
		},
		{
			"kind": "function",
			"type": "number",
			"name": "readByte",
			"memberof": "egret.ByteArray",
			"scope": "instance",
			"description": "从字节流中读取带符号的字节",
			"returns": "介于 -128 和 127 之间的整数",
			"version": "Egret 2.4",
			"platform": "Web,Native"
		},
		{
			"kind": "function",
			"type": "void",
			"name": "readBytes",
			"memberof": "egret.ByteArray",
			"scope": "instance",
			"description": "从字节流中读取 length 参数指定的数据字节数。从 offset 指定的位置开始，将字节读入 bytes 参数指定的 ByteArray 对象中，并将字节写入目标 ByteArray 中",
			"version": "Egret 2.4",
			"platform": "Web,Native",
			"params": [
				{
					"name": "bytes",
					"type": "egret.ByteArray",
					"description": "要将数据读入的 ByteArray 对象"
				},
				{
					"name": "offset",
					"type": "number",
					"default": "0",
					"description": "bytes 中的偏移（位置），应从该位置写入读取的数据"
				},
				{
					"name": "length",
					"type": "number",
					"default": "0",
					"description": "要读取的字节数。默认值 0 导致读取所有可用的数据"
				}
			]
		},
		{
			"kind": "function",
			"type": "number",
			"name": "readDouble",
			"memberof": "egret.ByteArray",
			"scope": "instance",
			"description": "从字节流中读取一个 IEEE 754 双精度（64 位）浮点数",
			"returns": "双精度（64 位）浮点数",
			"version": "Egret 2.4",
			"platform": "Web,Native"
		},
		{
			"kind": "function",
			"type": "number",
			"name": "readFloat",
			"memberof": "egret.ByteArray",
			"scope": "instance",
			"description": "从字节流中读取一个 IEEE 754 单精度（32 位）浮点数",
			"returns": "单精度（32 位）浮点数",
			"version": "Egret 2.4",
			"platform": "Web,Native"
		},
		{
			"kind": "function",
			"type": "number",
			"name": "readInt",
			"memberof": "egret.ByteArray",
			"scope": "instance",
			"description": "从字节流中读取一个带符号的 32 位整数",
			"returns": "介于 -2147483648 和 2147483647 之间的 32 位带符号整数",
			"version": "Egret 2.4",
			"platform": "Web,Native"
		},
		{
			"kind": "function",
			"type": "number",
			"name": "readShort",
			"memberof": "egret.ByteArray",
			"scope": "instance",
			"description": "从字节流中读取一个带符号的 16 位整数",
			"returns": "介于 -32768 和 32767 之间的 16 位带符号整数",
			"version": "Egret 2.4",
			"platform": "Web,Native"
		},
		{
			"kind": "function",
			"type": "string",
			"name": "readUTF",
			"memberof": "egret.ByteArray",
			"scope": "instance",
			"description": "从字节流中读取一个 UTF-8 字符串。假定字符串的前缀是无符号的短整型（以字节表示长度）",
			"returns": "UTF-8 编码的字符串",
			"version": "Egret 2.4",
			"platform": "Web,Native"
		},
		{
			"kind": "function",
			"type": "string",
			"name": "readUTFBytes",
			"memberof": "egret.ByteArray",
			"scope": "instance",
			"description": "从字节流中读取一个由 length 参数指定的 UTF-8 字节序列，并返回一个字符串",
			"returns": "由指定长度的 UTF-8 字节组成的字符串",
			"version": "Egret 2.4",
			"platform": "Web,Native",
			"params": [
				{
					"name": "length",
					"type": "number",
					"description": "指明 UTF-8 字节长度的无符号短整型数"
				}
			]
		},
		{
			"kind": "function",
			"type": "number",
			"name": "readUnsignedByte",
			"memberof": "egret.ByteArray",
			"scope": "instance",
			"description": "从字节流中读取无符号的字节",
			"returns": "介于 0 和 255 之间的 32 位无符号整数",
			"version": "Egret 2.4",
			"platform": "Web,Native"
		},
		{
			"kind": "function",
			"type": "number",
			"name": "readUnsignedInt",
			"memberof": "egret.ByteArray",
			"scope": "instance",
			"description": "从字节流中读取一个无符号的 32 位整数",
			"returns": "介于 0 和 4294967295 之间的 32 位无符号整数",
			"version": "Egret 2.4",
			"platform": "Web,Native"
		},
		{
			"kind": "function",
			"type": "number",
			"name": "readUnsignedShort",
			"memberof": "egret.ByteArray",
			"scope": "instance",
			"description": "从字节流中读取一个无符号的 16 位整数",
			"returns": "介于 0 和 65535 之间的 16 位无符号整数",
			"version": "Egret 2.4",
			"platform": "Web,Native"
		},
		{
			"kind": "function",
			"type": "void",
			"name": "setArrayBuffer",
			"memberof": "egret.ByteArray",
			"scope": "instance",
			"deprecated": true,
			"version": "Egret 2.4",
			"platform": "Web,Native",
			"params": [
				{
					"name": "buffer",
					"type": "ArrayBuffer",
					"description": ""
				}
			]
		},
		{
			"kind": "function",
			"type": "void",
			"name": "writeBoolean",
			"memberof": "egret.ByteArray",
			"scope": "instance",
			"description": "写入布尔值。根据 value 参数写入单个字节。如果为 true，则写入 1，如果为 false，则写入 0",
			"version": "Egret 2.4",
			"platform": "Web,Native",
			"params": [
				{
					"name": "value",
					"type": "boolean",
					"description": "确定写入哪个字节的布尔值。如果该参数为 true，则该方法写入 1；如果该参数为 false，则该方法写入 0"
				}
			]
		},
		{
			"kind": "function",
			"type": "void",
			"name": "writeByte",
			"memberof": "egret.ByteArray",
			"scope": "instance",
			"description": "在字节流中写入一个字节使用参数的低 8 位。忽略高 24 位",
			"version": "Egret 2.4",
			"platform": "Web,Native",
			"params": [
				{
					"name": "value",
					"type": "number",
					"description": "一个 32 位整数。低 8 位将被写入字节流"
				}
			]
		},
		{
			"kind": "function",
			"type": "void",
			"name": "writeBytes",
			"memberof": "egret.ByteArray",
			"scope": "instance",
			"description": "将指定字节数组 bytes（起始偏移量为 offset，从零开始的索引）中包含 length 个字节的字节序列写入字节流如果省略 length 参数，则使用默认长度 0；该方法将从 offset 开始写入整个缓冲区。如果还省略了 offset 参数，则写入整个缓冲区如果 offset 或 length 超出范围，它们将被锁定到 bytes 数组的开头和结尾",
			"version": "Egret 2.4",
			"platform": "Web,Native",
			"params": [
				{
					"name": "bytes",
					"type": "egret.ByteArray",
					"description": "ByteArray 对象"
				},
				{
					"name": "offset",
					"type": "number",
					"default": "0",
					"description": "从 0 开始的索引，表示在数组中开始写入的位置"
				},
				{
					"name": "length",
					"type": "number",
					"default": "0",
					"description": "一个无符号整数，表示在缓冲区中的写入范围"
				}
			]
		},
		{
			"kind": "function",
			"type": "void",
			"name": "writeDouble",
			"memberof": "egret.ByteArray",
			"scope": "instance",
			"description": "在字节流中写入一个 IEEE 754 双精度（64 位）浮点数",
			"version": "Egret 2.4",
			"platform": "Web,Native",
			"params": [
				{
					"name": "value",
					"type": "number",
					"description": "双精度（64 位）浮点数"
				}
			]
		},
		{
			"kind": "function",
			"type": "void",
			"name": "writeFloat",
			"memberof": "egret.ByteArray",
			"scope": "instance",
			"description": "在字节流中写入一个 IEEE 754 单精度（32 位）浮点数",
			"version": "Egret 2.4",
			"platform": "Web,Native",
			"params": [
				{
					"name": "value",
					"type": "number",
					"description": "单精度（32 位）浮点数"
				}
			]
		},
		{
			"kind": "function",
			"type": "void",
			"name": "writeInt",
			"memberof": "egret.ByteArray",
			"scope": "instance",
			"description": "在字节流中写入一个带符号的 32 位整数",
			"version": "Egret 2.4",
			"platform": "Web,Native",
			"params": [
				{
					"name": "value",
					"type": "number",
					"description": "要写入字节流的整数"
				}
			]
		},
		{
			"kind": "function",
			"type": "void",
			"name": "writeShort",
			"memberof": "egret.ByteArray",
			"scope": "instance",
			"description": "在字节流中写入一个 16 位整数。使用参数的低 16 位。忽略高 16 位",
			"version": "Egret 2.4",
			"platform": "Web,Native",
			"params": [
				{
					"name": "value",
					"type": "number",
					"description": "32 位整数，该整数的低 16 位将被写入字节流"
				}
			]
		},
		{
			"kind": "function",
			"type": "void",
			"name": "writeUTF",
			"memberof": "egret.ByteArray",
			"scope": "instance",
			"description": "将 UTF-8 字符串写入字节流。先写入以字节表示的 UTF-8 字符串长度（作为 16 位整数），然后写入表示字符串字符的字节",
			"version": "Egret 2.4",
			"platform": "Web,Native",
			"params": [
				{
					"name": "value",
					"type": "string",
					"description": "要写入的字符串值"
				}
			]
		},
		{
			"kind": "function",
			"type": "void",
			"name": "writeUTFBytes",
			"memberof": "egret.ByteArray",
			"scope": "instance",
			"description": "将 UTF-8 字符串写入字节流。类似于 writeUTF() 方法，但 writeUTFBytes() 不使用 16 位长度的词为字符串添加前缀",
			"version": "Egret 2.4",
			"platform": "Web,Native",
			"params": [
				{
					"name": "value",
					"type": "string",
					"description": "要写入的字符串值"
				}
			]
		},
		{
			"kind": "function",
			"type": "void",
			"name": "writeUnsignedInt",
			"memberof": "egret.ByteArray",
			"scope": "instance",
			"description": "在字节流中写入一个无符号的 32 位整数",
			"version": "Egret 2.4",
			"platform": "Web,Native",
			"params": [
				{
					"name": "value",
					"type": "number",
					"description": "要写入字节流的无符号整数"
				}
			]
		},
		{
			"kind": "function",
			"type": "void",
			"name": "writeUnsignedShort",
			"memberof": "egret.ByteArray",
			"scope": "instance",
			"description": "在字节流中写入一个无符号的 16 位整数",
			"version": "Egret 2.5",
			"platform": "Web,Native",
			"params": [
				{
					"name": "value",
					"type": "number",
					"description": "要写入字节流的无符号整数"
				}
			]
		}
	],
	"globalMember": [],
	"globalFunction": [],
	"class": {
		"kind": "class",
		"name": "ByteArray",
		"memberof": "egret",
		"filename": "egret/utils/ByteArray.ts",
		"description": "ByteArray 类提供用于优化读取、写入以及处理二进制数据的方法和属性。注意：ByteArray 类适用于需要在字节层访问数据的高级开发人员。",
		"version": "Egret 2.4",
		"platform": "Web,Native",
		"example": "<pre>/**<br/>&nbsp;*&nbsp;下面的示例使用&nbsp;ByteArrayExample&nbsp;类创建新&nbsp;ByteArray&nbsp;对象，然后使用&nbsp;console.log()&nbsp;方法输出各种类方法的结果。<br/>&nbsp;*/<br/>class&nbsp;ByteArrayExample&nbsp;extends&nbsp;egret.DisplayObjectContainer&nbsp;{<br/>&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;constructor()&nbsp;{<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;super();<br/><br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;byteArray:egret.ByteArray&nbsp;=&nbsp;new&nbsp;egret.ByteArray();<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;byteArray.writeUTF(&quot;Hello&nbsp;Egret&quot;);<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;byteArray.writeBoolean(false);<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;byteArray.writeByte(32);<br/><br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;byteArray.position&nbsp;=&nbsp;0;<br/><br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;console.log(byteArray.readUTF());//Hello&nbsp;Egret<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;console.log(byteArray.readBoolean());//false<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;console.log(byteArray.readByte());//32<br/>&nbsp;&nbsp;&nbsp;&nbsp;}<br/>}</pre>"
	}
}