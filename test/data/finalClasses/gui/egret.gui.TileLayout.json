{
	"member": [
		{
			"kind": "member",
			"type": "string",
			"name": "columnAlign",
			"memberof": "egret.gui.TileLayout",
			"scope": "instance",
			"description": "指定如何将完全可见列与容器宽度对齐。设置为 ColumnAlign.LEFT 时，它会关闭列两端对齐。在容器的最后一列和右边缘之间可能存在部分可见的列或空白。这是默认值。设置为 ColumnAlign.JUSTIFY_USING_GAP 时，horizontalGap 的实际值将增大，这样最后一个完全可见列右边缘会与容器的右边缘对齐。仅存在一个完全可见列时，horizontalGap 的实际值将增大，这样它会将任何部分可见列推到容器的右边缘之外。请注意显式设置 horizontalGap 属性不会关闭两端对齐。它仅确定初始间隙值。两端对齐可能会增大它。设置为 ColumnAlign.JUSTIFY_USING_WIDTH 时，columnWidth 的实际值将增大，这样最后一个完全可见列右边缘会与容器的右边缘对齐。请注意显式设置 columnWidth 属性不会关闭两端对齐。它仅确定初始列宽度值。两端对齐可能会增大它。"
		},
		{
			"kind": "member",
			"type": "number",
			"name": "columnCount",
			"memberof": "egret.gui.TileLayout",
			"scope": "instance",
			"rwType": 1,
			"description": "实际列计数。"
		},
		{
			"kind": "member",
			"type": "number",
			"name": "columnWidth",
			"memberof": "egret.gui.TileLayout",
			"scope": "instance",
			"description": "实际列宽（以像素为单位）。 若未显式设置，则从根据最宽的元素的宽度确定列宽度。"
		},
		{
			"kind": "member",
			"type": "number",
			"name": "hashCode",
			"memberof": "egret.HashObject",
			"scope": "instance",
			"rwType": 1,
			"description": "返回此对象唯一的哈希值,用于唯一确定一个对象。hashCode为大于等于1的整数。",
			"version": "Egret 2.4",
			"platform": "Web,Native",
			"inherited": true,
			"inherits": "egret.HashObject"
		},
		{
			"kind": "member",
			"type": "string",
			"name": "horizontalAlign",
			"memberof": "egret.gui.TileLayout",
			"scope": "instance",
			"description": "指定如何在水平方向上对齐单元格内的元素。支持的值有 HorizontalAlign.LEFT、HorizontalAlign.CENTER、HorizontalAlign.RIGHT、HorizontalAlign.JUSTIFY。默认值：HorizontalAlign.JUSTIFY"
		},
		{
			"kind": "member",
			"type": "number",
			"name": "horizontalGap",
			"memberof": "egret.gui.TileLayout",
			"scope": "instance",
			"description": "列之间的水平空间（以像素为单位）。"
		},
		{
			"kind": "member",
			"type": "string",
			"name": "orientation",
			"memberof": "egret.gui.TileLayout",
			"scope": "instance",
			"description": "指定是逐行还是逐列排列元素。"
		},
		{
			"kind": "member",
			"type": "number",
			"name": "padding",
			"memberof": "egret.gui.TileLayout",
			"scope": "instance",
			"description": "四个边缘的共同内边距。若单独设置了任一边缘的内边距，则该边缘的内边距以单独设置的值为准。此属性主要用于快速设置多个边缘的相同内边距。默认值：0。"
		},
		{
			"kind": "member",
			"type": "number",
			"name": "paddingBottom",
			"memberof": "egret.gui.TileLayout",
			"scope": "instance",
			"description": "容器的底边缘与最后一个布局元素的底边缘之间的像素数,若为NaN将使用padding的值，默认值：NaN。"
		},
		{
			"kind": "member",
			"type": "number",
			"name": "paddingLeft",
			"memberof": "egret.gui.TileLayout",
			"scope": "instance",
			"description": "容器的左边缘与布局元素的左边缘之间的最少像素数,若为NaN将使用padding的值，默认值：NaN。"
		},
		{
			"kind": "member",
			"type": "number",
			"name": "paddingRight",
			"memberof": "egret.gui.TileLayout",
			"scope": "instance",
			"description": "容器的右边缘与布局元素的右边缘之间的最少像素数,若为NaN将使用padding的值，默认值：NaN。"
		},
		{
			"kind": "member",
			"type": "number",
			"name": "paddingTop",
			"memberof": "egret.gui.TileLayout",
			"scope": "instance",
			"description": "容器的顶边缘与第一个布局元素的顶边缘之间的像素数,若为NaN将使用padding的值，默认值：NaN。"
		},
		{
			"kind": "member",
			"type": "number",
			"name": "requestedColumnCount",
			"memberof": "egret.gui.TileLayout",
			"scope": "instance",
			"description": "要显示的列数。设置为0表示自动确定列计数,默认值0。<br/>注意:当orientation为TileOrientation.COLUMNS(逐列排列元素)且taget被显式设置宽度时，此属性无效。"
		},
		{
			"kind": "member",
			"type": "number",
			"name": "requestedRowCount",
			"memberof": "egret.gui.TileLayout",
			"scope": "instance",
			"description": "要显示的行数。设置为0表示自动确定行计数,默认值0。<br/>注意:当orientation为TileOrientation.ROWS(即逐行排列元素,此为默认值)且target被显式设置高度时，此属性无效。"
		},
		{
			"kind": "member",
			"type": "string",
			"name": "rowAlign",
			"memberof": "egret.gui.TileLayout",
			"scope": "instance",
			"description": "指定如何将完全可见行与容器高度对齐。设置为 RowAlign.TOP 时，它会关闭列两端对齐。在容器的最后一行和底边缘之间可能存在部分可见的行或空白。这是默认值。设置为 RowAlign.JUSTIFY_USING_GAP 时，verticalGap 的实际值会增大，这样最后一个完全可见行底边缘会与容器的底边缘对齐。仅存在一个完全可见行时，verticalGap 的值会增大，这样它会将任何部分可见行推到容器的底边缘之外。请注意，显式设置 verticalGap不会关闭两端对齐，而只是确定初始间隙值。两端对齐接着可以增大它。设置为 RowAlign.JUSTIFY_USING_HEIGHT 时，rowHeight 的实际值会增大，这样最后一个完全可见行底边缘会与容器的底边缘对齐。请注意，显式设置 rowHeight 不会关闭两端对齐，而只是确定初始行高度值。两端对齐接着可以增大它。"
		},
		{
			"kind": "member",
			"type": "number",
			"name": "rowCount",
			"memberof": "egret.gui.TileLayout",
			"scope": "instance",
			"rwType": 1,
			"description": "实际行计数。"
		},
		{
			"kind": "member",
			"type": "number",
			"name": "rowHeight",
			"memberof": "egret.gui.TileLayout",
			"scope": "instance",
			"description": "行高（以像素为单位）。 如果未显式设置，则从元素的高度的最大值确定行高度。"
		},
		{
			"kind": "member",
			"type": "egret.gui.GroupBase",
			"name": "target",
			"memberof": "egret.gui.LayoutBase",
			"scope": "instance",
			"description": "目标容器",
			"inherited": true,
			"inherits": "egret.gui.LayoutBase"
		},
		{
			"kind": "member",
			"type": "egret.Rectangle",
			"name": "typicalLayoutRect",
			"memberof": "egret.gui.LayoutBase",
			"scope": "instance",
			"description": "由虚拟布局所使用，以估计尚未滚动到视图中的布局元素的大小。",
			"inherited": true,
			"inherits": "egret.gui.LayoutBase"
		},
		{
			"kind": "member",
			"type": "boolean",
			"name": "useVirtualLayout",
			"memberof": "egret.gui.LayoutBase",
			"scope": "instance",
			"description": "若要配置容器使用虚拟布局，请为与容器关联的布局的 useVirtualLayout 属性设置为 true。只有布局设置为 VerticalLayout、HorizontalLayout 或 TileLayout 的 DataGroup 或 SkinnableDataContainer 才支持虚拟布局。不支持虚拟化的布局子类必须禁止更改此属性。",
			"inherited": true,
			"inherits": "egret.gui.LayoutBase"
		},
		{
			"kind": "member",
			"type": "string",
			"name": "verticalAlign",
			"memberof": "egret.gui.TileLayout",
			"scope": "instance",
			"description": "指定如何在垂直方向上对齐单元格内的元素。支持的值有 VerticalAlign.TOP、VerticalAlign.MIDDLE、VerticalAlign.BOTTOM、VerticalAlign.JUSTIFY。 默认值：VerticalAlign.JUSTIFY。"
		},
		{
			"kind": "member",
			"type": "number",
			"name": "verticalGap",
			"memberof": "egret.gui.TileLayout",
			"scope": "instance",
			"description": "行之间的垂直空间（以像素为单位）。"
		}
	],
	"function": [
		{
			"kind": "function",
			"name": "TileLayout",
			"memberof": "egret.gui.TileLayout",
			"scope": "instance",
			"description": "构造函数"
		},
		{
			"kind": "function",
			"type": "void",
			"name": "addEventListener",
			"memberof": "egret.EventDispatcher",
			"scope": "instance",
			"inheritDoc": true,
			"version": "Egret 2.4",
			"platform": "Web,Native",
			"params": [
				{
					"name": "type",
					"type": "string",
					"description": "事件的类型。"
				},
				{
					"name": "listener",
					"type": "Function",
					"description": "处理事件的侦听器函数。此函数必须接受 Event 对象作为其唯一的参数，并且不能返回任何结果，如下面的示例所示： function(evt:Event):void 函数可以有任何名称。"
				},
				{
					"name": "thisObject",
					"type": "any",
					"description": "侦听函数绑定的this对象"
				},
				{
					"name": "useCapture",
					"question": true,
					"type": "boolean",
					"description": "确定侦听器是运行于捕获阶段还是运行于冒泡阶段。如果将 useCapture 设置为 true，则侦听器只在捕获阶段处理事件，而不在冒泡阶段处理事件。如果 useCapture 为 false，则侦听器只在冒泡阶段处理事件。要在两个阶段都侦听事件，请调用 on() 两次：一次将 useCapture 设置为 true，一次将 useCapture 设置为 false。"
				},
				{
					"name": "priority",
					"question": true,
					"type": "number",
					"description": "事件侦听器的优先级。优先级由一个带符号的整数指定。数字越大，优先级越高。优先级为 n 的所有侦听器会在优先级为 n -1 的侦听器之前得到处理。如果两个或更多个侦听器共享相同的优先级，则按照它们的添加顺序进行处理。默认优先级为 0。"
				}
			],
			"inherited": true,
			"inherits": "egret.EventDispatcher",
			"description": "使用 EventDispatcher 对象注册事件侦听器对象，以使侦听器能够接收事件通知。可以为特定类型的事件、阶段和优先级在显示列表的所有节点上注册事件侦听器。成功注册一个事件侦听器后，无法通过额外调用 on() 来更改其优先级。要更改侦听器的优先级，必须先调用 removeEventListener()。然后，可以使用新的优先级再次注册该侦听器。注册该侦听器后，如果继续调用具有不同 type 或 useCapture值的 on()，则会创建单独的侦听器注册。<br/>如果不再需要某个事件侦听器，可调用 EventDispatcher.removeEventListener()删除它；否则会产生内存问题。由于垃圾回收器不会删除仍包含引用的对象，因此不会从内存中自动删除使用已注册事件侦听器的对象。复制EventDispatcher 实例时并不复制其中附加的事件侦听器。（如果新近创建的节点需要一个事件侦听器，必须在创建该节点后附加该侦听器。）但是，如果移动 EventDispatcher 实例，则其中附加的事件侦听器也会随之移动。如果在正在处理事件的节点上注册事件侦听器，则不会在当前阶段触发事件侦听器，但会在事件流的稍后阶段触发，如冒泡阶段。如果从正在处理事件的节点中删除事件侦听器，则该事件侦听器仍由当前操作触发。删除事件侦听器后，决不会再次调用该事件侦听器（除非再次注册以备将来处理）。",
			"see": [
				"#once()",
				"#removeEventListener()"
			]
		},
		{
			"kind": "function",
			"type": "void",
			"name": "clearVirtualLayoutCache",
			"memberof": "egret.gui.TileLayout",
			"scope": "instance",
			"description": "如果 useVirtualLayout 为 true，则当布局目标改变时，布局目标可以使用此方法来清除已缓存布局信息"
		},
		{
			"kind": "function",
			"type": "boolean",
			"name": "dispatchEvent",
			"memberof": "egret.EventDispatcher",
			"scope": "instance",
			"inheritDoc": true,
			"version": "Egret 2.4",
			"platform": "Web,Native",
			"params": [
				{
					"name": "event",
					"type": "egret.Event",
					"description": "调度到事件流中的 Event 对象。"
				}
			],
			"inherited": true,
			"inherits": "egret.EventDispatcher",
			"description": "将事件分派到事件流中。事件目标是对其调用 dispatchEvent() 方法的 EventDispatcher 对象。",
			"returns": "如果成功调度了事件，则值为 true。值 false 表示失败或对事件调用了 preventDefault()。"
		},
		{
			"kind": "function",
			"type": "boolean",
			"name": "dispatchEventWith",
			"memberof": "egret.EventDispatcher",
			"scope": "instance",
			"description": "派发一个指定参数的事件。",
			"version": "Egret 2.4",
			"platform": "Web,Native",
			"params": [
				{
					"name": "type",
					"type": "string",
					"description": "事件类型"
				},
				{
					"name": "bubbles",
					"question": true,
					"type": "boolean",
					"description": "确定 Event 对象是否参与事件流的冒泡阶段。默认值为 false。"
				},
				{
					"name": "data",
					"question": true,
					"type": "any",
					"description": "事件data"
				},
				{
					"name": "cancelable",
					"question": true,
					"type": "boolean",
					"description": "确定是否可以取消 Event 对象。默认值为 false。"
				}
			],
			"inherited": true,
			"inherits": "egret.EventDispatcher"
		},
		{
			"kind": "function",
			"type": "void",
			"name": "elementAdded",
			"memberof": "egret.gui.LayoutBase",
			"scope": "instance",
			"description": "在已添加布局元素之后且在验证目标的大小和显示列表之前，由目标调用。按元素状态缓存的布局（比如虚拟布局）可以覆盖此方法以更新其缓存。",
			"params": [
				{
					"name": "index",
					"type": "number",
					"description": ""
				}
			],
			"inherited": true,
			"inherits": "egret.gui.LayoutBase"
		},
		{
			"kind": "function",
			"type": "void",
			"name": "elementRemoved",
			"memberof": "egret.gui.LayoutBase",
			"scope": "instance",
			"description": "必须在已删除布局元素之后且在验证目标的大小和显示列表之前，由目标调用此方法。按元素状态缓存的布局（比如虚拟布局）可以覆盖此方法以更新其缓存。",
			"params": [
				{
					"name": "index",
					"type": "number",
					"description": ""
				}
			],
			"inherited": true,
			"inherits": "egret.gui.LayoutBase"
		},
		{
			"kind": "function",
			"type": "boolean",
			"name": "hasEventListener",
			"memberof": "egret.EventDispatcher",
			"scope": "instance",
			"inheritDoc": true,
			"version": "Egret 2.4",
			"platform": "Web,Native",
			"params": [
				{
					"name": "type",
					"type": "string",
					"description": "事件的类型。"
				}
			],
			"inherited": true,
			"inherits": "egret.EventDispatcher",
			"description": "检查 EventDispatcher 对象是否为特定事件类型注册了任何侦听器。这样，您就可以确定 EventDispatcher 对象在事件流层次结构中的哪个位置改变了对事件类型的处理。要确定特定事件类型是否确实会触发事件侦听器，请使用 IEventDispatcher.willTrigger()。hasEventListener()与 willTrigger() 的区别是：hasEventListener() 只检查它所属的对象，而 willTrigger() 检查整个事件流以查找由 type 参数指定的事件。",
			"returns": "如果指定类型的侦听器已注册，则值为 true；否则，值为 false。",
			"see": [
				"#willTrigger()"
			]
		},
		{
			"kind": "function",
			"type": "void",
			"name": "measure",
			"memberof": "egret.gui.TileLayout",
			"scope": "instance",
			"description": "基于目标的内容测量其默认大小，并（可选）测量目标的默认最小大小"
		},
		{
			"kind": "function",
			"type": "void",
			"name": "once",
			"memberof": "egret.EventDispatcher",
			"scope": "instance",
			"inheritDoc": true,
			"version": "Egret 2.4",
			"platform": "Web,Native",
			"params": [
				{
					"name": "type",
					"type": "string",
					"description": "事件的类型。"
				},
				{
					"name": "listener",
					"type": "Function",
					"description": "处理事件的侦听器函数。此函数必须接受 Event 对象作为其唯一的参数，并且不能返回任何结果，如下面的示例所示： function(evt:Event):void 函数可以有任何名称。"
				},
				{
					"name": "thisObject",
					"type": "any",
					"description": "侦听函数绑定的this对象"
				},
				{
					"name": "useCapture",
					"question": true,
					"type": "boolean",
					"description": "确定侦听器是运行于捕获阶段还是运行于冒泡阶段。如果将 useCapture 设置为 true，则侦听器只在捕获阶段处理事件，而不在冒泡阶段处理事件。如果 useCapture 为 false，则侦听器只在冒泡阶段处理事件。要在两个阶段都侦听事件，请调用 once() 两次：一次将 useCapture 设置为 true，一次将 useCapture 设置为 false。"
				},
				{
					"name": "priority",
					"question": true,
					"type": "number",
					"description": "事件侦听器的优先级。优先级由一个带符号整数指定。数字越大，优先级越高。优先级为 n 的所有侦听器会在优先级为 n -1 的侦听器之前得到处理。如果两个或更多个侦听器共享相同的优先级，则按照它们的添加顺序进行处理。默认优先级为 0。"
				}
			],
			"inherited": true,
			"inherits": "egret.EventDispatcher",
			"description": "添加仅回调一次的事件侦听器，此方法与on()方法不同，on()方法会持续产生回调，而此方法在第一次回调时就会自动移除监听。",
			"see": [
				"#on()",
				"#removeEventListener()"
			]
		},
		{
			"kind": "function",
			"type": "void",
			"name": "removeEventListener",
			"memberof": "egret.EventDispatcher",
			"scope": "instance",
			"inheritDoc": true,
			"version": "Egret 2.4",
			"platform": "Web,Native",
			"params": [
				{
					"name": "type",
					"type": "string",
					"description": "事件的类型。"
				},
				{
					"name": "listener",
					"type": "Function",
					"description": "要删除的侦听器对象"
				},
				{
					"name": "thisObject",
					"type": "any",
					"description": "侦听函数绑定的this对象"
				},
				{
					"name": "useCapture",
					"question": true,
					"type": "boolean",
					"description": "指出是为捕获阶段还是为冒泡阶段注册了侦听器。如果为捕获阶段以及冒泡阶段注册了侦听器，则需要对removeEventListener() 进行两次调用才能将这两个侦听器删除：一次调用将 useCapture 设置为 true，另一次调用将 useCapture 设置为 false。。"
				}
			],
			"inherited": true,
			"inherits": "egret.EventDispatcher",
			"description": "从 EventDispatcher 对象中删除侦听器。如果没有向 EventDispatcher 对象注册任何匹配的侦听器，则对此方法的调用没有任何效果。"
		},
		{
			"kind": "function",
			"type": "void",
			"name": "scrollPositionChanged",
			"memberof": "egret.gui.TileLayout",
			"scope": "instance",
			"description": "verticalScrollPosition 或 horizontalScrollPosition 属性更改时调用"
		},
		{
			"kind": "function",
			"type": "void",
			"name": "updateDisplayList",
			"memberof": "egret.gui.TileLayout",
			"scope": "instance",
			"description": "调整目标的元素的大小并定位这些元素",
			"params": [
				{
					"name": "width",
					"type": "number",
					"description": ""
				},
				{
					"name": "height",
					"type": "number",
					"description": ""
				}
			]
		},
		{
			"kind": "function",
			"type": "boolean",
			"name": "willTrigger",
			"memberof": "egret.EventDispatcher",
			"scope": "instance",
			"inheritDoc": true,
			"version": "Egret 2.4",
			"platform": "Web,Native",
			"params": [
				{
					"name": "type",
					"type": "string",
					"description": "事件类型"
				}
			],
			"inherited": true,
			"inherits": "egret.EventDispatcher",
			"description": "检查是否用此 EventDispatcher 对象或其任何始祖为指定事件类型注册了事件侦听器。将指定类型的事件调度给此EventDispatcher 对象或其任一后代时，如果在事件流的任何阶段触发了事件侦听器，则此方法返回 true。hasEventListener() 与 willTrigger() 方法的区别是：hasEventListener() 只检查它所属的对象，而 willTrigger() 方法检查整个事件流以查找由 type 参数指定的事件。",
			"returns": "是否注册过监听器，如果注册过返回true，反之返回false",
			"see": [
				"#hasEventListener()"
			]
		}
	],
	"globalMember": [],
	"globalFunction": [],
	"class": {
		"kind": "class",
		"name": "TileLayout",
		"memberof": "egret.gui",
		"filename": "extension\\gui\\layouts\\TileLayout.ts",
		"description": "格子布局",
		"augments": [
			"egret.gui.LayoutBase",
			"egret.EventDispatcher",
			"egret.HashObject"
		]
	}
}