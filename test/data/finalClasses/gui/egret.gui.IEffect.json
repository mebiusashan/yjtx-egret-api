{
	"member": [
		{
			"kind": "member",
			"type": "number",
			"name": "duration",
			"memberof": "egret.gui.IEffect",
			"scope": "instance",
			"description": "效果的持续时间（以毫秒为单位）。"
		},
		{
			"kind": "member",
			"type": "number",
			"name": "hashCode",
			"memberof": "egret.HashObject",
			"scope": "instance",
			"rwType": 1,
			"description": "返回此对象唯一的哈希值,用于唯一确定一个对象。hashCode为大于等于1的整数。",
			"version": "Egret 2.4",
			"platform": "Web,Native",
			"inherited": true,
			"inherits": "egret.HashObject"
		},
		{
			"kind": "member",
			"type": "boolean",
			"name": "isPlaying",
			"memberof": "egret.gui.IEffect",
			"scope": "instance",
			"description": "一个只读标志，如果当前正在播放效果的任一实例，则为 true；否则，则为 false。"
		},
		{
			"kind": "member",
			"type": "number",
			"name": "perElementOffset",
			"memberof": "egret.gui.IEffect",
			"scope": "instance",
			"description": "在效果的第一个目标之后，其他效果目标的附加延迟（以毫秒为单位）。此值将添加到 startDelay 属性的值中。"
		},
		{
			"kind": "member",
			"type": "number",
			"name": "playheadTime",
			"memberof": "egret.gui.IEffect",
			"scope": "instance",
			"description": "效果的当前时间位置。此属性的值介于 0 和总持续时间（包括该效果的 startDelay、repeatCount 和 repeatDelay）之间。"
		},
		{
			"kind": "member",
			"type": "any",
			"name": "target",
			"memberof": "egret.gui.IEffect",
			"scope": "instance",
			"description": "要应用此效果的对象。当效果触发器触发某个效果时，会自动将 target 属性设置为触发该效果的对象。"
		},
		{
			"kind": "member",
			"type": "any[]",
			"name": "targets",
			"memberof": "egret.gui.IEffect",
			"scope": "instance",
			"description": "一个对象 Array，这些对象都是效果的目标。播放效果时，会对各个目标并行执行效果。设置 target 属性将替换此 Array 中的所有对象。设置 targets 属性后，target 属性将返回此 Array 中的第一个项目。"
		}
	],
	"function": [
		{
			"kind": "function",
			"type": "void",
			"name": "addEventListener",
			"memberof": "egret.IEventDispatcher",
			"scope": "instance",
			"description": "使用 EventDispatcher 对象注册事件侦听器对象，以使侦听器能够接收事件通知。可以为特定类型的事件、阶段和优先级在显示列表的所有节点上注册事件侦听器。成功注册一个事件侦听器后，无法通过额外调用 on() 来更改其优先级。要更改侦听器的优先级，必须先调用 removeEventListener()。然后，可以使用新的优先级再次注册该侦听器。注册该侦听器后，如果继续调用具有不同 type 或 useCapture值的 on()，则会创建单独的侦听器注册。<br/>如果不再需要某个事件侦听器，可调用 EventDispatcher.removeEventListener()删除它；否则会产生内存问题。由于垃圾回收器不会删除仍包含引用的对象，因此不会从内存中自动删除使用已注册事件侦听器的对象。复制EventDispatcher 实例时并不复制其中附加的事件侦听器。（如果新近创建的节点需要一个事件侦听器，必须在创建该节点后附加该侦听器。）但是，如果移动 EventDispatcher 实例，则其中附加的事件侦听器也会随之移动。如果在正在处理事件的节点上注册事件侦听器，则不会在当前阶段触发事件侦听器，但会在事件流的稍后阶段触发，如冒泡阶段。如果从正在处理事件的节点中删除事件侦听器，则该事件侦听器仍由当前操作触发。删除事件侦听器后，决不会再次调用该事件侦听器（除非再次注册以备将来处理）。",
			"see": [
				"#once()",
				"#removeEventListener()"
			],
			"version": "Egret 2.4",
			"platform": "Web,Native",
			"params": [
				{
					"name": "type",
					"type": "string",
					"description": "事件的类型。"
				},
				{
					"name": "listener",
					"type": "Function",
					"description": "处理事件的侦听器函数。此函数必须接受 Event 对象作为其唯一的参数，并且不能返回任何结果，如下面的示例所示： function(evt:Event):void 函数可以有任何名称。"
				},
				{
					"name": "thisObject",
					"type": "any",
					"description": "侦听函数绑定的this对象"
				},
				{
					"name": "useCapture",
					"question": true,
					"type": "boolean",
					"description": "确定侦听器是运行于捕获阶段还是运行于冒泡阶段。如果将 useCapture 设置为 true，则侦听器只在捕获阶段处理事件，而不在冒泡阶段处理事件。如果 useCapture 为 false，则侦听器只在冒泡阶段处理事件。要在两个阶段都侦听事件，请调用 on() 两次：一次将 useCapture 设置为 true，一次将 useCapture 设置为 false。"
				},
				{
					"name": "priority",
					"question": true,
					"type": "number",
					"description": "事件侦听器的优先级。优先级由一个带符号的整数指定。数字越大，优先级越高。优先级为 n 的所有侦听器会在优先级为 n -1 的侦听器之前得到处理。如果两个或更多个侦听器共享相同的优先级，则按照它们的添加顺序进行处理。默认优先级为 0。"
				}
			],
			"inherited": true,
			"inherits": "egret.IEventDispatcher"
		},
		{
			"kind": "function",
			"type": "egret.gui.IEffectInstance",
			"name": "createInstance",
			"memberof": "egret.gui.IEffect",
			"scope": "instance",
			"description": "创建一个效果实例并对其进行初始化。在播放效果实例前，使用此方法（而非 play() 方法）处理效果实例属性。  <p>所创建的效果实例的类型由 instanceClass 属性指定。然后，使用 _initInstance() 方法初始化此实例。如果该实例是 EffectManager 在效果触发器触发此效果时创建的，则还需要调用 EffectInstance.initEffect() 方法进一步初始化此效果。</p> <p>调用 createInstance() 方法不会播放效果。对返回的效果实例调用 startEffect() 方法。</p> <p>Effect.play() 方法将自动调用此函数。 </p>",
			"returns": "效果的效果实例对象。",
			"params": [
				{
					"name": "target",
					"question": true,
					"type": "any",
					"description": "要使用此效果为其设置动画的对象。"
				}
			]
		},
		{
			"kind": "function",
			"type": "any[]",
			"name": "createInstances",
			"memberof": "egret.gui.IEffect",
			"scope": "instance",
			"description": "获取一个目标对象 Array，并对每个目标调用 createInstance() 方法。",
			"returns": "效果的效果实例对象的数组，一个目标一个数组。",
			"params": [
				{
					"name": "targets",
					"question": true,
					"type": "any[]",
					"description": "要使用此效果设置动画的对象的数组。"
				}
			]
		},
		{
			"kind": "function",
			"type": "void",
			"name": "deleteInstance",
			"memberof": "egret.gui.IEffect",
			"scope": "instance",
			"description": "删除实例中的事件侦听器，然后从实例列表中删除该实例。",
			"params": [
				{
					"name": "instance",
					"type": "egret.gui.IEffectInstance",
					"description": ""
				}
			]
		},
		{
			"kind": "function",
			"type": "boolean",
			"name": "dispatchEvent",
			"memberof": "egret.IEventDispatcher",
			"scope": "instance",
			"description": "将事件分派到事件流中。事件目标是对其调用 dispatchEvent() 方法的 EventDispatcher 对象。",
			"returns": "如果成功调度了事件，则值为 true。值 false 表示失败或对事件调用了 preventDefault()。",
			"version": "Egret 2.4",
			"platform": "Web,Native",
			"params": [
				{
					"name": "event",
					"type": "egret.Event",
					"description": "调度到事件流中的 Event 对象。"
				}
			],
			"inherited": true,
			"inherits": "egret.IEventDispatcher"
		},
		{
			"kind": "function",
			"type": "void",
			"name": "end",
			"memberof": "egret.gui.IEffect",
			"scope": "instance",
			"description": "中断当前正在播放的效果，立即跳转到该效果的末尾。调用此方法将调用 EffectInstance.end() 方法。 <p>如果调用此方法来结束播放效果，效果实例将分派 effectEnd 事件。</p><p>如果将效果实例作为参数传递，则会中断此实例。如果没有传入参数，则该效果当前生成的所有效果实例都将中断。</p>",
			"params": [
				{
					"name": "effectInstance",
					"question": true,
					"type": "egret.gui.IEffectInstance",
					"description": ""
				}
			]
		},
		{
			"kind": "function",
			"type": "boolean",
			"name": "hasEventListener",
			"memberof": "egret.IEventDispatcher",
			"scope": "instance",
			"description": "检查 EventDispatcher 对象是否为特定事件类型注册了任何侦听器。这样，您就可以确定 EventDispatcher 对象在事件流层次结构中的哪个位置改变了对事件类型的处理。要确定特定事件类型是否确实会触发事件侦听器，请使用 IEventDispatcher.willTrigger()。hasEventListener()与 willTrigger() 的区别是：hasEventListener() 只检查它所属的对象，而 willTrigger() 检查整个事件流以查找由 type 参数指定的事件。",
			"returns": "如果指定类型的侦听器已注册，则值为 true；否则，值为 false。",
			"see": [
				"#willTrigger()"
			],
			"version": "Egret 2.4",
			"platform": "Web,Native",
			"params": [
				{
					"name": "type",
					"type": "string",
					"description": "事件的类型。"
				}
			],
			"inherited": true,
			"inherits": "egret.IEventDispatcher"
		},
		{
			"kind": "function",
			"type": "void",
			"name": "once",
			"memberof": "egret.IEventDispatcher",
			"scope": "instance",
			"description": "添加仅回调一次的事件侦听器，此方法与on()方法不同，on()方法会持续产生回调，而此方法在第一次回调时就会自动移除监听。",
			"see": [
				"#on()",
				"#removeEventListener()"
			],
			"version": "Egret 2.4",
			"platform": "Web,Native",
			"params": [
				{
					"name": "type",
					"type": "string",
					"description": "事件的类型。"
				},
				{
					"name": "listener",
					"type": "Function",
					"description": "处理事件的侦听器函数。此函数必须接受 Event 对象作为其唯一的参数，并且不能返回任何结果，如下面的示例所示： function(evt:Event):void 函数可以有任何名称。"
				},
				{
					"name": "thisObject",
					"type": "any",
					"description": "侦听函数绑定的this对象"
				},
				{
					"name": "useCapture",
					"question": true,
					"type": "boolean",
					"description": "确定侦听器是运行于捕获阶段还是运行于冒泡阶段。如果将 useCapture 设置为 true，则侦听器只在捕获阶段处理事件，而不在冒泡阶段处理事件。如果 useCapture 为 false，则侦听器只在冒泡阶段处理事件。要在两个阶段都侦听事件，请调用 once() 两次：一次将 useCapture 设置为 true，一次将 useCapture 设置为 false。"
				},
				{
					"name": "priority",
					"question": true,
					"type": "number",
					"description": "事件侦听器的优先级。优先级由一个带符号整数指定。数字越大，优先级越高。优先级为 n 的所有侦听器会在优先级为 n -1 的侦听器之前得到处理。如果两个或更多个侦听器共享相同的优先级，则按照它们的添加顺序进行处理。默认优先级为 0。"
				}
			],
			"inherited": true,
			"inherits": "egret.IEventDispatcher"
		},
		{
			"kind": "function",
			"type": "void",
			"name": "pause",
			"memberof": "egret.gui.IEffect",
			"scope": "instance",
			"description": "暂停效果，直到调用 resume() 方法。"
		},
		{
			"kind": "function",
			"type": "any[]",
			"name": "play",
			"memberof": "egret.gui.IEffect",
			"scope": "instance",
			"description": "开始播放效果。通常在调用 play() 方法之前先调用 end() 方法，以确保在开始播放新效果前已结束先前效果的所有实例。",
			"returns": "效果的 EffectInstance 对象的数组，一个目标一个数组。",
			"params": [
				{
					"name": "targets",
					"question": true,
					"type": "any[]",
					"description": "播放此效果的目标对象的数组。如果已指定此参数，则不会使用效果的 targets 属性。"
				},
				{
					"name": "playReversedFromEnd",
					"question": true,
					"type": "boolean",
					"description": "如果为 true，则向后播放效果。"
				}
			]
		},
		{
			"kind": "function",
			"type": "void",
			"name": "removeEventListener",
			"memberof": "egret.IEventDispatcher",
			"scope": "instance",
			"description": "从 EventDispatcher 对象中删除侦听器。如果没有向 EventDispatcher 对象注册任何匹配的侦听器，则对此方法的调用没有任何效果。",
			"version": "Egret 2.4",
			"platform": "Web,Native",
			"params": [
				{
					"name": "type",
					"type": "string",
					"description": "事件的类型。"
				},
				{
					"name": "listener",
					"type": "Function",
					"description": "要删除的侦听器对象"
				},
				{
					"name": "thisObject",
					"type": "any",
					"description": "侦听函数绑定的this对象"
				},
				{
					"name": "useCapture",
					"question": true,
					"type": "boolean",
					"description": "指出是为捕获阶段还是为冒泡阶段注册了侦听器。如果为捕获阶段以及冒泡阶段注册了侦听器，则需要对removeEventListener() 进行两次调用才能将这两个侦听器删除：一次调用将 useCapture 设置为 true，另一次调用将 useCapture 设置为 false。。"
				}
			],
			"inherited": true,
			"inherits": "egret.IEventDispatcher"
		},
		{
			"kind": "function",
			"type": "void",
			"name": "resume",
			"memberof": "egret.gui.IEffect",
			"scope": "instance",
			"description": "在效果由 pause() 方法暂停后继续播放效果。"
		},
		{
			"kind": "function",
			"type": "void",
			"name": "reverse",
			"memberof": "egret.gui.IEffect",
			"scope": "instance",
			"description": "逆序播放效果；如果当前正在播放效果，则从该效果的当前位置开始逆序播放。"
		},
		{
			"kind": "function",
			"type": "void",
			"name": "stop",
			"memberof": "egret.gui.IEffect",
			"scope": "instance",
			"description": "停止播放效果，使效果目标保持当前状态。与调用 pause() 方法不同，无法先调用 stop() 方法再调用 resume() 方法。不过，您可以调用 play() 方法重新播放效果。"
		},
		{
			"kind": "function",
			"type": "boolean",
			"name": "willTrigger",
			"memberof": "egret.IEventDispatcher",
			"scope": "instance",
			"description": "检查是否用此 EventDispatcher 对象或其任何始祖为指定事件类型注册了事件侦听器。将指定类型的事件调度给此EventDispatcher 对象或其任一后代时，如果在事件流的任何阶段触发了事件侦听器，则此方法返回 true。hasEventListener() 与 willTrigger() 方法的区别是：hasEventListener() 只检查它所属的对象，而 willTrigger() 方法检查整个事件流以查找由 type 参数指定的事件。",
			"returns": "是否注册过监听器，如果注册过返回true，反之返回false",
			"see": [
				"#hasEventListener()"
			],
			"version": "Egret 2.4",
			"platform": "Web,Native",
			"params": [
				{
					"name": "type",
					"type": "string",
					"description": "事件类型"
				}
			],
			"inherited": true,
			"inherits": "egret.IEventDispatcher"
		}
	],
	"globalMember": [],
	"globalFunction": [],
	"class": {
		"kind": "interface",
		"name": "IEffect",
		"memberof": "egret.gui",
		"filename": "extension\\gui\\effect\\IEffect.ts",
		"augments": [
			"egret.IEventDispatcher",
			"egret.HashObject"
		]
	}
}